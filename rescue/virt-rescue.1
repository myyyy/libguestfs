.\" Automatically generated by Podwrapper::Man 1.30.3 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "virt-rescue 1"
.TH virt-rescue 1 "2015-10-16" "libguestfs-1.30.3" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
virt\-rescue \- Run a rescue shell on a virtual machine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& virt\-rescue [\-\-options] \-d domname
\&
\& virt\-rescue [\-\-options] \-a disk.img [\-a disk.img ...]
\&
\& virt\-rescue \-\-suggest (\-d domname | \-a disk.img ...)
.Ve
.PP
Old style:
.PP
.Vb 1
\& virt\-rescue [\-\-options] domname
\&
\& virt\-rescue [\-\-options] disk.img [disk.img ...]
.Ve
.SH "WARNING"
.IX Header "WARNING"
You must \fInot\fR use \f(CW\*(C`virt\-rescue\*(C'\fR on live virtual machines.  Doing so
will probably result in disk corruption in the \s-1VM\s0.  \f(CW\*(C`virt\-rescue\*(C'\fR
tries to stop you from doing this, but doesn't catch all cases.
.PP
However if you use the \fI\-\-ro\fR (read only) option, then you can attach
a shell to a live virtual machine.  The results might be strange or
inconsistent at times but you won't get disk corruption.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
virt-rescue is like a Rescue \s-1CD\s0, but for virtual machines, and without
the need for a \s-1CD\s0.  virt-rescue gives you a rescue shell and some
simple recovery tools which you can use to examine or rescue a virtual
machine or disk image.
.PP
You can run virt-rescue on any virtual machine known to libvirt, or
directly on disk image(s):
.PP
.Vb 1
\& virt\-rescue \-d GuestName
\&
\& virt\-rescue \-\-ro \-a /path/to/disk.img
\&
\& virt\-rescue \-a /dev/sdc
.Ve
.PP
For live VMs you \fImust\fR use the \-\-ro option.
.PP
When you run virt-rescue on a virtual machine or disk image, you are
placed in an interactive bash shell where you can use many ordinary
Linux commands.  What you see in \fI/\fR (\fI/bin\fR, \fI/lib\fR etc) is the
rescue appliance.  You must mount the virtual machine's filesystems by
hand.  There is an empty directory called \fI/sysroot\fR where you can
mount filesystems.
.PP
You can get virt-rescue to suggest mount commands for you by using the
\&\fI\-\-suggest\fR option (in another terminal):
.PP
.Vb 2
\& $ virt\-rescue \-\-suggest \-d Fedora15
\& Inspecting the virtual machine or disk image ...
\& 
\& This disk contains one or more operating systems.  You can use these
\& mount commands in virt\-rescue (at the ><rescue> prompt) to mount the
\& filesystems.
\& 
\& # /dev/vg_f15x32/lv_root is the root of a linux operating system
\& # type: linux, distro: fedora, version: 15.0
\& # Fedora release 15 (Lovelock)
\& 
\& mount /dev/vg_f15x32/lv_root /sysroot/
\& mount /dev/vda1 /sysroot/boot
\& mount \-\-bind /dev /sysroot/dev
\& mount \-\-bind /dev/pts /sysroot/dev/pts
\& mount \-\-bind /proc /sysroot/proc
\& mount \-\-bind /sys /sysroot/sys
.Ve
.PP
Another way is to list the logical volumes (with \fIlvs\fR\|(8)) and
partitions (with \fIparted\fR\|(8)) and mount them by hand:
.PP
.Vb 7
\& ><rescue> lvs
\& LV      VG        Attr   LSize   Origin Snap%  Move Log Copy%  Convert
\& lv_root vg_f15x32 \-wi\-a\-   8.83G
\& lv_swap vg_f15x32 \-wi\-a\- 992.00M
\& ><rescue> mount /dev/vg_f15x32/lv_root /sysroot
\& ><rescue> mount /dev/vda1 /sysroot/boot
\& ><rescue> ls /sysroot
.Ve
.PP
Another command to list available filesystems is
\&\fIvirt\-filesystems\fR\|(1).
.PP
To run commands in a Linux guest (for example, grub), you should
chroot into the /sysroot directory first:
.PP
.Vb 1
\& ><rescue> chroot /sysroot
.Ve
.SS "\s-1NOTES\s0"
.IX Subsection "NOTES"
Virt-rescue can be used on \fIany\fR disk image file or device, not just
a virtual machine.  For example you can use it on a blank file if you
want to partition that file (although we would recommend using
\&\fIguestfish\fR\|(1) instead as it is more suitable for this purpose).  You
can even use virt-rescue on things like \s-1SD\s0 cards.
.PP
You can get virt-rescue to give you scratch disk(s) to play with.
This is useful for testing out Linux utilities (see \fI\-\-scratch\fR).
.PP
Virt-rescue does not require root.  You only need to run it as root if
you need root to open the disk image.
.PP
This tool is just designed for quick interactive hacking on a virtual
machine.  For more structured access to a virtual machine disk image,
you should use \fIguestfs\fR\|(3).  To get a structured shell that you can
use to make scripted changes to guests, use \fIguestfish\fR\|(1).
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Display brief help.
.IP "\fB\-a\fR file" 4
.IX Item "-a file"
.PD 0
.IP "\fB\-\-add\fR file" 4
.IX Item "--add file"
.PD
Add \fIfile\fR which should be a disk image from a virtual machine.  If
the virtual machine has multiple block devices, you must supply all of
them with separate \fI\-a\fR options.
.Sp
The format of the disk image is auto-detected.  To override this and
force a particular format use the \fI\-\-format=..\fR option.
.IP "\fB\-a \s-1URI\s0\fR" 4
.IX Item "-a URI"
.PD 0
.IP "\fB\-\-add \s-1URI\s0\fR" 4
.IX Item "--add URI"
.PD
Add a remote disk.  See \*(L"\s-1ADDING\s0 \s-1REMOTE\s0 \s-1STORAGE\s0\*(R" in \fIguestfish\fR\|(1).
.IP "\fB\-\-append kernelopts\fR" 4
.IX Item "--append kernelopts"
Pass additional options to the rescue kernel.
.IP "\fB\-c\fR \s-1URI\s0" 4
.IX Item "-c URI"
.PD 0
.IP "\fB\-\-connect\fR \s-1URI\s0" 4
.IX Item "--connect URI"
.PD
If using libvirt, connect to the given \fI\s-1URI\s0\fR.  If omitted, then we
connect to the default libvirt hypervisor.
.Sp
If you specify guest block devices directly (\fI\-a\fR), then libvirt is
not used at all.
.IP "\fB\-d\fR guest" 4
.IX Item "-d guest"
.PD 0
.IP "\fB\-\-domain\fR guest" 4
.IX Item "--domain guest"
.PD
Add all the disks from the named libvirt guest.  Domain UUIDs can be
used instead of names.
.IP "\fB\-\-format=raw|qcow2|..\fR" 4
.IX Item "--format=raw|qcow2|.."
.PD 0
.IP "\fB\-\-format\fR" 4
.IX Item "--format"
.PD
The default for the \fI\-a\fR option is to auto-detect the format of the
disk image.  Using this forces the disk format for \fI\-a\fR options which
follow on the command line.  Using \fI\-\-format\fR with no argument
switches back to auto-detection for subsequent \fI\-a\fR options.
.Sp
For example:
.Sp
.Vb 1
\& virt\-rescue \-\-format=raw \-a disk.img
.Ve
.Sp
forces raw format (no auto-detection) for \fIdisk.img\fR.
.Sp
.Vb 1
\& virt\-rescue \-\-format=raw \-a disk.img \-\-format \-a another.img
.Ve
.Sp
forces raw format (no auto-detection) for \fIdisk.img\fR and reverts to
auto-detection for \fIanother.img\fR.
.Sp
If you have untrusted raw-format guest disk images, you should use
this option to specify the disk format.  This avoids a possible
security problem with malicious guests (\s-1CVE\-2010\-3851\s0).
.IP "\fB\-m \s-1MB\s0\fR" 4
.IX Item "-m MB"
.PD 0
.IP "\fB\-\-memsize \s-1MB\s0\fR" 4
.IX Item "--memsize MB"
.PD
Change the amount of memory allocated to the rescue system.  The
default is set by libguestfs and is small but adequate for running
system tools.  The occasional program might need more memory.  The
parameter is specified in megabytes.
.IP "\fB\-\-network\fR" 4
.IX Item "--network"
Enable \s-1QEMU\s0 user networking in the guest.  See \*(L"\s-1NETWORK\s0\*(R".
.IP "\fB\-r\fR" 4
.IX Item "-r"
.PD 0
.IP "\fB\-\-ro\fR" 4
.IX Item "--ro"
.PD
Open the image read-only.
.Sp
The option must always be used if the disk image or virtual machine
might be running, and is generally recommended in cases where you
don't need write access to the disk.
.Sp
See also \*(L"\s-1OPENING\s0 \s-1DISKS\s0 \s-1FOR\s0 \s-1READ\s0 \s-1AND\s0 \s-1WRITE\s0\*(R" in \fIguestfish\fR\|(1).
.IP "\fB\-\-scratch\fR" 4
.IX Item "--scratch"
.PD 0
.IP "\fB\-\-scratch=N\fR" 4
.IX Item "--scratch=N"
.PD
The \fI\-\-scratch\fR option adds a large scratch disk to the rescue
appliance.  \fI\-\-scratch=N\fR adds \f(CW\*(C`N\*(C'\fR scratch disks.  The scratch
disk(s) are deleted automatically when virt-rescue exits.
.Sp
You can also mix \fI\-a\fR, \fI\-d\fR and \fI\-\-scratch\fR options.  The scratch
disk(s) are added to the appliance in the order they appear on the
command line.
.IP "\fB\-\-selinux\fR" 4
.IX Item "--selinux"
Enable SELinux in the rescue appliance.  You should read
\&\*(L"\s-1SELINUX\s0\*(R" in \fIguestfs\fR\|(3) before using this option.
.IP "\fB\-\-smp\fR N" 4
.IX Item "--smp N"
Enable N ≥ 2 virtual CPUs in the rescue appliance.
.IP "\fB\-\-suggest\fR" 4
.IX Item "--suggest"
Inspect the disk image and suggest what mount commands should be used
to mount the disks.  You should use the \fI\-\-suggest\fR option in a
second terminal, then paste the commands into another virt-rescue.
.Sp
This option implies \fI\-\-ro\fR and is safe to use even if the guest is up
or if another virt-rescue is running.
.IP "\fB\-v\fR" 4
.IX Item "-v"
.PD 0
.IP "\fB\-\-verbose\fR" 4
.IX Item "--verbose"
.PD
Enable verbose messages for debugging.
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
Display version number and exit.
.IP "\fB\-w\fR" 4
.IX Item "-w"
.PD 0
.IP "\fB\-\-rw\fR" 4
.IX Item "--rw"
.PD
This changes the \fI\-a\fR and \fI\-d\fR options so that disks are
added and mounts are done read-write.
.Sp
See \*(L"\s-1OPENING\s0 \s-1DISKS\s0 \s-1FOR\s0 \s-1READ\s0 \s-1AND\s0 \s-1WRITE\s0\*(R" in \fIguestfish\fR\|(1).
.IP "\fB\-x\fR" 4
.IX Item "-x"
Enable tracing of libguestfs \s-1API\s0 calls.
.SH "OLD-STYLE COMMAND LINE ARGUMENTS"
.IX Header "OLD-STYLE COMMAND LINE ARGUMENTS"
Previous versions of virt-rescue allowed you to write either:
.PP
.Vb 1
\& virt\-rescue disk.img [disk.img ...]
.Ve
.PP
or
.PP
.Vb 1
\& virt\-rescue guestname
.Ve
.PP
whereas in this version you should use \fI\-a\fR or \fI\-d\fR respectively
to avoid the confusing case where a disk image might have the same
name as a guest.
.PP
For compatibility the old style is still supported.
.SH "NETWORK"
.IX Header "NETWORK"
Adding the \fI\-\-network\fR option enables \s-1QEMU\s0 user networking
in the rescue appliance.  There are some differences between
user networking and ordinary networking:
.IP "ping does not work" 4
.IX Item "ping does not work"
Because the \s-1ICMP\s0 \s-1ECHO_REQUEST\s0 protocol generally requires root in
order to send the ping packets, and because virt-rescue must be able
to run as non-root, \s-1QEMU\s0 user networking is not able to emulate the
\&\fIping\fR\|(8) command.  The ping command will appear to resolve addresses
but will not be able to send or receive any packets.  This does not
mean that the network is not working.
.IP "cannot receive connections" 4
.IX Item "cannot receive connections"
\&\s-1QEMU\s0 user networking cannot receive incoming connections.
.IP "making \s-1TCP\s0 connections" 4
.IX Item "making TCP connections"
The virt-rescue appliance needs to be small and so does not include
many network tools.  In particular there is no \fItelnet\fR\|(1) command.
You can make \s-1TCP\s0 connections from the shell using the magical
\&\fI/dev/tcp/<hostname>/<port>\fR syntax:
.Sp
.Vb 3
\& exec 3<>/dev/tcp/redhat.com/80
\& echo "GET /" >&3
\& cat <&3
.Ve
.Sp
See \fIbash\fR\|(1) for more details.
.SH "CAPTURING CORE DUMPS"
.IX Header "CAPTURING CORE DUMPS"
If you are testing a tool inside virt-rescue and the tool (\fBnot\fR
virt-rescue) segfaults, it can be tricky to capture the core dump
outside virt-rescue for later analysis.  This section describes one
way to do this.
.IP "1." 4
Create a scratch disk for core dumps:
.Sp
.Vb 3
\& truncate \-s 4G /tmp/corefiles
\& virt\-format \-\-partition=mbr \-\-filesystem=ext2 \-a /tmp/corefiles
\& virt\-filesystems \-a /tmp/corefiles \-\-all \-\-long \-h
.Ve
.IP "2." 4
When starting virt-rescue, attach the core files disk last:
.Sp
.Vb 1
\& virt\-rescue \-\-rw [\-a ...] \-a /tmp/corefiles
.Ve
.Sp
\&\fB\s-1NB\s0.\fR If you use the \fI\-\-ro\fR option, then virt-rescue will silently
not write any core files to \fI/tmp/corefiles\fR.
.IP "3." 4
Inside virt-rescue, mount the core files disk.  Note replace
\&\fI/dev/sdb1\fR with the last disk index.  For example if the core files
disk is the last of four disks, you would use \fI/dev/sdd1\fR.
.Sp
.Vb 2
\& ><rescue> mkdir /tmp/mnt
\& ><rescue> mount /dev/sdb1 /tmp/mnt
.Ve
.IP "4." 4
Enable core dumps in the rescue kernel:
.Sp
.Vb 3
\& ><rescue> echo \*(Aq/tmp/mnt/core.%p\*(Aq > /proc/sys/kernel/core_pattern
\& ><rescue> ulimit \-Hc unlimited
\& ><rescue> ulimit \-Sc unlimited
.Ve
.IP "5." 4
Run the tool that caused the core dump.  The core dump will be written
to \fI/tmp/mnt/core.\fI\s-1PID\s0\fI\fR.
.Sp
.Vb 4
\& ><rescue> ls \-l /tmp/mnt
\& total 1628
\& \-rw\-\-\-\-\-\-\- 1 root root 1941504 Dec  7 13:13 core.130
\& drwx\-\-\-\-\-\- 2 root root   16384 Dec  7 13:00 lost+found
.Ve
.IP "6." 4
Before exiting virt-rescue, unmount (or at least sync) the disks:
.Sp
.Vb 2
\& ><rescue> umount /tmp/mnt
\& ><rescue> exit
.Ve
.IP "7." 4
Outside virt-rescue, the core dump(s) can be removed from the disk
using \fIguestfish\fR\|(1).  For example:
.Sp
.Vb 3
\& guestfish \-\-ro \-a /tmp/corefiles \-m /dev/sda1
\& ><fs> ll /
\& ><fs> download /core.NNN /tmp/core.NNN
.Ve
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
Several environment variables affect virt-rescue.  See
\&\*(L"\s-1ENVIRONMENT\s0 \s-1VARIABLES\s0\*(R" in \fIguestfs\fR\|(3) for the complete list.
.SH "FILES"
.IX Header "FILES"
.ie n .IP "$XDG_CONFIG_HOME/libguestfs/libguestfs\-tools.conf" 4
.el .IP "\f(CW$XDG_CONFIG_HOME\fR/libguestfs/libguestfs\-tools.conf" 4
.IX Item "$XDG_CONFIG_HOME/libguestfs/libguestfs-tools.conf"
.PD 0
.ie n .IP "$HOME/.libguestfs\-tools.rc" 4
.el .IP "\f(CW$HOME\fR/.libguestfs\-tools.rc" 4
.IX Item "$HOME/.libguestfs-tools.rc"
.ie n .IP "$XDG_CONFIG_DIRS/libguestfs/libguestfs\-tools.conf" 4
.el .IP "\f(CW$XDG_CONFIG_DIRS\fR/libguestfs/libguestfs\-tools.conf" 4
.IX Item "$XDG_CONFIG_DIRS/libguestfs/libguestfs-tools.conf"
.IP "/etc/libguestfs\-tools.conf" 4
.IX Item "/etc/libguestfs-tools.conf"
.PD
This configuration file controls the default read-only or read-write
mode (\fI\-\-ro\fR or \fI\-\-rw\fR).
.Sp
See \fIlibguestfs\-tools.conf\fR\|(5).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIguestfs\fR\|(3),
\&\fIguestfish\fR\|(1),
\&\fIvirt\-cat\fR\|(1),
\&\fIvirt\-edit\fR\|(1),
\&\fIvirt\-filesystems\fR\|(1),
\&\fIlibguestfs\-tools.conf\fR\|(5),
http://libguestfs.org/.
.SH "AUTHOR"
.IX Header "AUTHOR"
Richard W.M. Jones http://people.redhat.com/~rjones/
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2009\-2015 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.
.PP
This program is distributed in the hope that it will be useful, but
\&\s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the \s-1GNU\s0
General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, \s-1MA\s0 02110\-1301 \s-1USA\s0.
.SH "BUGS"
.IX Header "BUGS"
To get a list of bugs against libguestfs, use this link:
https://bugzilla.redhat.com/buglist.cgi?component=libguestfs&product=Virtualization+Tools
.PP
To report a new bug against libguestfs, use this link:
https://bugzilla.redhat.com/enter_bug.cgi?component=libguestfs&product=Virtualization+Tools
.PP
When reporting a bug, please supply:
.IP "\(bu" 4
The version of libguestfs.
.IP "\(bu" 4
Where you got libguestfs (eg. which Linux distro, compiled from source, etc)
.IP "\(bu" 4
Describe the bug accurately and give a way to reproduce it.
.IP "\(bu" 4
Run \fIlibguestfs\-test\-tool\fR\|(1) and paste the \fBcomplete, unedited\fR
output into the bug report.
