.\" Automatically generated by Podwrapper::Man 1.30.3 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "virt-sparsify 1"
.TH virt-sparsify 1 "2015-10-26" "libguestfs-1.30.3" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
virt\-sparsify \- Make a virtual machine disk sparse
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& virt\-sparsify [\-\-options] indisk outdisk
\&
\& virt\-sparsify [\-\-options] \-\-in\-place disk
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Virt-sparsify is a tool which can make a virtual machine disk (or any
disk image) sparse a.k.a. thin-provisioned.  This means that free
space within the disk image can be converted back to free space on the
host.
.PP
Virt-sparsify can locate and sparsify free space in most filesystems
(eg. ext2/3/4, btrfs, \s-1NTFS\s0, etc.), and also in \s-1LVM\s0 physical volumes.
.PP
Virt-sparsify can also convert between some disk formats, for example
converting a raw disk image to a thin-provisioned qcow2 image.
.PP
Virt-sparsify can operate on any disk image, not just ones from
virtual machines.  However if a virtual machine has multiple disks
and uses volume management, then virt-sparsify will work but not be
very effective (http://bugzilla.redhat.com/887826).
.SS "\s-1IMPORTANT\s0 \s-1NOTE\s0 \s-1ABOUT\s0 \s-1SPARSE\s0 \s-1OUTPUT\s0 \s-1IMAGES\s0"
.IX Subsection "IMPORTANT NOTE ABOUT SPARSE OUTPUT IMAGES"
If the input is raw, then the default output is raw sparse.  \fBYou
must check the output size using a tool that understands sparseness\fR
such as \f(CW\*(C`du \-sh\*(C'\fR.  It can make a huge difference:
.PP
.Vb 4
\& $ ls \-lh test1.img
\& \-rw\-rw\-r\-\-. 1 rjones rjones 100M Aug  8 08:08 test1.img
\& $ du \-sh test1.img
\& 3.6M   test1.img
.Ve
.PP
(Compare the apparent size \fB100M\fR vs the actual size \fB3.6M\fR)
.SS "\s-1IMPORTANT\s0 \s-1LIMITATIONS\s0"
.IX Subsection "IMPORTANT LIMITATIONS"
.IP "\(bu" 4
The virtual machine \fImust be shut down\fR before using this tool.
.IP "\(bu" 4
Virt-sparsify may require up to 2x the virtual size of the source disk
image (1 temporary copy + 1 destination image).  This is in the worst
case and usually much less space is required.
.Sp
If you are using the \fI\-\-in\-place\fR option, then large amounts of
temporary space are \fBnot\fR required.
.IP "\(bu" 4
Virt-sparsify cannot resize disk images.  To do that, use
\&\fIvirt\-resize\fR\|(1).
.IP "\(bu" 4
Virt-sparsify cannot handle encrypted disks.  Libguestfs supports
encrypted disks, but encrypted disks themselves cannot be sparsified.
.IP "\(bu" 4
Virt-sparsify cannot yet sparsify the space between partitions.  Note
that this space is often used for critical items like bootloaders so
it's not really unused.
.IP "\(bu" 4
In copy mode, qcow2 internal snapshots are not copied over to the
destination image.
.PP
You may also want to read the manual pages for the associated tools
\&\fIvirt\-filesystems\fR\|(1) and \fIvirt\-df\fR\|(1) before starting.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Typical usage is:
.PP
.Vb 1
\& virt\-sparsify indisk outdisk
.Ve
.PP
which copies \f(CW\*(C`indisk\*(C'\fR to \f(CW\*(C`outdisk\*(C'\fR, making the output sparse.
\&\f(CW\*(C`outdisk\*(C'\fR is created, or overwritten if it already exists.  The
format of the input disk is detected (eg. qcow2) and the same format
is used for the output disk.
.PP
To convert between formats, use the \fI\-\-convert\fR option:
.PP
.Vb 1
\& virt\-sparsify disk.raw \-\-convert qcow2 disk.qcow2
.Ve
.PP
Virt-sparsify tries to zero and sparsify free space on every
filesystem it can find within the source disk image.  You can get it
to ignore (don't zero free space on) certain filesystems by doing:
.PP
.Vb 1
\& virt\-sparsify \-\-ignore /dev/sda1 indisk outdisk
.Ve
.PP
See \fIvirt\-filesystems\fR\|(1) to get a list of filesystems within a disk
image.
.PP
Since virt-sparsify â‰¥ 1.26, you can now sparsify a disk image
in place by doing:
.PP
.Vb 1
\& virt\-sparsify \-\-in\-place disk.img
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Display help.
.IP "\fB\-\-check\-tmpdir ignore\fR" 4
.IX Item "--check-tmpdir ignore"
.PD 0
.IP "\fB\-\-check\-tmpdir continue\fR" 4
.IX Item "--check-tmpdir continue"
.IP "\fB\-\-check\-tmpdir warn\fR" 4
.IX Item "--check-tmpdir warn"
.IP "\fB\-\-check\-tmpdir fail\fR" 4
.IX Item "--check-tmpdir fail"
.PD
Check if \*(L"\s-1TMPDIR\s0\*(R" or \fI\-\-tmp\fR directory has enough space to complete
the operation.  This is just an estimate.
.Sp
If the check indicates a problem, then you can either:
.RS 4
.IP "\(bu" 4
\&\fBignore\fR it,
.IP "\(bu" 4
print a warning and \fBcontinue\fR,
.IP "\(bu" 4
\&\fBwarn\fR and wait for the user to press the Return key
(this is the default), or:
.IP "\(bu" 4
\&\fBfail\fR and exit.
.RE
.RS 4
.Sp
You cannot use this option and \fI\-\-in\-place\fR together.
.RE
.IP "\fB\-\-compress\fR" 4
.IX Item "--compress"
Compress the output file.  This \fIonly\fR works if the output format is
\&\f(CW\*(C`qcow2\*(C'\fR.
.Sp
You cannot use this option and \fI\-\-in\-place\fR together.
.IP "\fB\-\-convert\fR raw" 4
.IX Item "--convert raw"
.PD 0
.IP "\fB\-\-convert\fR qcow2" 4
.IX Item "--convert qcow2"
.IP "\fB\-\-convert\fR [other formats]" 4
.IX Item "--convert [other formats]"
.PD
Use \f(CW\*(C`output\-format\*(C'\fR as the format for the destination image.  If this
is not specified, then the input format is used.
.Sp
Supported and known-working output formats are: \f(CW\*(C`raw\*(C'\fR, \f(CW\*(C`qcow2\*(C'\fR, \f(CW\*(C`vdi\*(C'\fR.
.Sp
You can also use any format supported by the \fIqemu\-img\fR\|(1) program,
eg. \f(CW\*(C`vmdk\*(C'\fR, but support for other formats is reliant on qemu.
.Sp
Specifying the \fI\-\-convert\fR option is usually a good idea, because
then virt-sparsify doesn't need to try to guess the input format.
.Sp
For fine-tuning the output format, see: \fI\-\-compress\fR, \fI\-o\fR.
.Sp
You cannot use this option and \fI\-\-in\-place\fR together.
.IP "\fB\-\-debug\-gc\fR" 4
.IX Item "--debug-gc"
Debug garbage collection and memory allocation.  This is only useful
when debugging memory problems in virt-sparsify or the OCaml libguestfs
bindings.
.IP "\fB\-\-format\fR raw" 4
.IX Item "--format raw"
.PD 0
.IP "\fB\-\-format\fR qcow2" 4
.IX Item "--format qcow2"
.PD
Specify the format of the input disk image.  If this flag is not
given then it is auto-detected from the image itself.
.Sp
If working with untrusted raw-format guest disk images, you should
ensure the format is always specified.
.IP "\fB\-\-ignore\fR filesystem" 4
.IX Item "--ignore filesystem"
.PD 0
.IP "\fB\-\-ignore\fR volgroup" 4
.IX Item "--ignore volgroup"
.PD
Ignore the named filesystem.
.Sp
When not using \fI\-\-in\-place\fR: Free space on the filesystem will not be
zeroed, but existing blocks of zeroes will still be sparsified.
.Sp
When using \fI\-\-in\-place\fR, the filesystem is ignored completely.
.Sp
In the second form, this ignores the named volume group.  Use the
volume group name without the \fI/dev/\fR prefix, eg. \fI\-\-ignore vg_foo\fR
.Sp
You can give this option multiple times.
.IP "\fB\-\-in\-place\fR" 4
.IX Item "--in-place"
Do in-place sparsification instead of copying sparsification.
See \*(L"IN-PLACE \s-1SPARSIFICATION\s0\*(R" below.
.IP "\fB\-\-machine\-readable\fR" 4
.IX Item "--machine-readable"
This option is used to make the output more machine friendly
when being parsed by other programs.  See
\&\*(L"\s-1MACHINE\s0 \s-1READABLE\s0 \s-1OUTPUT\s0\*(R" below.
.IP "\fB\-o\fR option[,option,...]" 4
.IX Item "-o option[,option,...]"
Pass \fI\-o\fR option(s) to the \fIqemu\-img\fR\|(1) command to fine-tune the
output format.  Options available depend on the output format (see
\&\fI\-\-convert\fR) and the installed version of the qemu-img program.
.Sp
You should use \fI\-o\fR at most once.  To pass multiple options, separate
them with commas, eg:
.Sp
.Vb 2
\& virt\-sparsify \-\-convert qcow2 \e
\&   \-o cluster_size=512,preallocation=metadata ...
.Ve
.Sp
You cannot use this option and \fI\-\-in\-place\fR together.
.IP "\fB\-q\fR" 4
.IX Item "-q"
.PD 0
.IP "\fB\-\-quiet\fR" 4
.IX Item "--quiet"
.PD
This disables progress bars and other unnecessary output.
.IP "\fB\-\-tmp\fR block_device" 4
.IX Item "--tmp block_device"
.PD 0
.IP "\fB\-\-tmp\fR dir" 4
.IX Item "--tmp dir"
.PD
In copying mode only, use the named device or directory as the
location of the temporary overlay (see also \*(L"\s-1TMPDIR\s0\*(R" below).
.Sp
If the parameter given is a block device, then the block device is
written to directly.
\&\fBNote this erases the existing contents of the block device\fR.
.Sp
If the parameter is a directory, then this is the same as setting the
\&\*(L"\s-1TMPDIR\s0\*(R" environment variable.
.Sp
You cannot use this option and \fI\-\-in\-place\fR together.
.IP "\fB\-\-tmp\fR prebuilt:file" 4
.IX Item "--tmp prebuilt:file"
In copying mode only, the specialized option \fI\-\-tmp prebuilt:file\fR
(where \f(CW\*(C`prebuilt:\*(C'\fR is a literal string) causes virt-sparsify to use
the qcow2 \f(CW\*(C`file\*(C'\fR as temporary space.
.RS 4
.IP "\(bu" 4
The file \fBmust\fR be freshly formatted as qcow2, with indisk as the
backing file.
.IP "\(bu" 4
If you rerun virt-sparsify, you \fBmust\fR recreate the file before
each run.
.IP "\(bu" 4
Virt-sparsify does not delete the file.
.RE
.RS 4
.Sp
This option is used by oVirt which requires a specially formatted
temporary file.
.RE
.IP "\fB\-v\fR" 4
.IX Item "-v"
.PD 0
.IP "\fB\-\-verbose\fR" 4
.IX Item "--verbose"
.PD
Enable verbose messages for debugging.
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
Display version number and exit.
.IP "\fB\-x\fR" 4
.IX Item "-x"
Enable tracing of libguestfs \s-1API\s0 calls.
.IP "\fB\-\-zero\fR partition" 4
.IX Item "--zero partition"
.PD 0
.IP "\fB\-\-zero\fR logvol" 4
.IX Item "--zero logvol"
.PD
Zero the contents of the named partition or logical volume in the
guest.  All data on the device is lost, but sparsification is
excellent!  You can give this option multiple times.
.SH "IN-PLACE SPARSIFICATION"
.IX Header "IN-PLACE SPARSIFICATION"
Since virt-sparsify â‰¥ 1.26, the tool is able to do in-place
sparsification (instead of copying from an input disk to an output
disk).  This is more efficient.  However it requires special support
in libguestfs, the kernel and qemu, and it is not able to recover
quite as much space as copying sparsification.  So in-place
sparsification is considered to be experimental at this time.
.PP
To use this mode, specify a disk image which will be modified in
place:
.PP
.Vb 1
\& virt\-sparsify \-\-in\-place disk.img
.Ve
.PP
Some options are not compatible with this mode: \fI\-\-convert\fR,
\&\fI\-\-compress\fR and \fI\-o\fR because they require wholesale disk format
changes; \fI\-\-check\-tmpdir\fR because large amounts of temporary space
are not required.
.PP
In-place sparsification works using discard (a.k.a trim or unmap)
support.
.SH "MACHINE READABLE OUTPUT"
.IX Header "MACHINE READABLE OUTPUT"
The \fI\-\-machine\-readable\fR option can be used to make the output more
machine friendly, which is useful when calling virt-sparsify from
other programs, GUIs etc.
.PP
There are two ways to use this option.
.PP
Firstly use the option on its own to query the capabilities of the
virt-sparsify binary.  Typical output looks like this:
.PP
.Vb 4
\& $ virt\-sparsify \-\-machine\-readable
\& virt\-sparsify
\& ntfs
\& btrfs
.Ve
.PP
A list of features is printed, one per line, and the program exits
with status 0.
.PP
Secondly use the option in conjunction with other options to make the
regular program output more machine friendly.
.PP
At the moment this means:
.IP "1." 4
Progress bar messages can be parsed from stdout by looking for this
regular expression:
.Sp
.Vb 1
\& ^[0\-9]+/[0\-9]+$
.Ve
.IP "2." 4
The calling program should treat messages sent to stdout (except for
progress bar messages) as status messages.  They can be logged and/or
displayed to the user.
.IP "3." 4
The calling program should treat messages sent to stderr as error
messages.  In addition, virt-sparsify exits with a non-zero status
code if there was a fatal error.
.PP
All versions of virt-sparsify have supported the \fI\-\-machine\-readable\fR
option.
.SH "WINDOWS 8"
.IX Header "WINDOWS 8"
Windows 8 \*(L"fast startup\*(R" can prevent virt-sparsify from working.
See \*(L"\s-1WINDOWS\s0 \s-1HIBERNATION\s0 \s-1AND\s0 \s-1WINDOWS\s0 8 \s-1FAST\s0 \s-1STARTUP\s0\*(R" in \fIguestfs\fR\|(3).
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
.IP "\s-1TMPDIR\s0" 4
.IX Item "TMPDIR"
Location of the temporary directory used for the potentially large
temporary overlay file.
.Sp
In virt-sparsify â‰¥ 1.28, you can override this environment
variable using the \fI\-\-tmp\fR option.
.Sp
You should ensure there is enough free space in the worst case for a
full copy of the source disk (\fIvirtual\fR size), or else set \f(CW$TMPDIR\fR
to point to another directory that has enough space.
.Sp
This defaults to \fI/tmp\fR.
.Sp
Note that if \f(CW$TMPDIR\fR is a tmpfs (eg. if \fI/tmp\fR is on tmpfs, or if
you use \f(CW\*(C`TMPDIR=/dev/shm\*(C'\fR), tmpfs defaults to a maximum size of
\&\fIhalf\fR of physical \s-1RAM\s0.  If virt-sparsify exceeds this, it will hang.
The solution is either to use a real disk, or to increase the maximum
size of the tmpfs mountpoint, eg:
.Sp
.Vb 1
\& mount \-o remount,size=10G /tmp
.Ve
.Sp
If you are using the \fI\-\-in\-place\fR option, then large amounts of
temporary space are \fBnot\fR required.
.PP
For other environment variables, see \*(L"\s-1ENVIRONMENT\s0 \s-1VARIABLES\s0\*(R" in \fIguestfs\fR\|(3).
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
This program returns 0 if the operation completed without errors.
(This doesn't necessarily mean that space could be freed up.)
.PP
A non-zero exit code indicates an error.
.PP
If the exit code is \f(CW3\fR and the \fI\-\-in\-place\fR option was used, that
indicates that discard support is not available in libguestfs, so
copying mode must be used instead.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIvirt\-df\fR\|(1),
\&\fIvirt\-filesystems\fR\|(1),
\&\fIvirt\-resize\fR\|(1),
\&\fIvirt\-rescue\fR\|(1),
\&\fIguestfs\fR\|(3),
\&\fIguestfish\fR\|(1),
\&\fItruncate\fR\|(1),
\&\fIfallocate\fR\|(1),
\&\fIqemu\-img\fR\|(1),
http://libguestfs.org/.
.SH "AUTHOR"
.IX Header "AUTHOR"
Richard W.M. Jones http://people.redhat.com/~rjones/
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2011\-2015 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.
.PP
This program is distributed in the hope that it will be useful, but
\&\s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the \s-1GNU\s0
General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, \s-1MA\s0 02110\-1301 \s-1USA\s0.
.SH "BUGS"
.IX Header "BUGS"
To get a list of bugs against libguestfs, use this link:
https://bugzilla.redhat.com/buglist.cgi?component=libguestfs&product=Virtualization+Tools
.PP
To report a new bug against libguestfs, use this link:
https://bugzilla.redhat.com/enter_bug.cgi?component=libguestfs&product=Virtualization+Tools
.PP
When reporting a bug, please supply:
.IP "\(bu" 4
The version of libguestfs.
.IP "\(bu" 4
Where you got libguestfs (eg. which Linux distro, compiled from source, etc)
.IP "\(bu" 4
Describe the bug accurately and give a way to reproduce it.
.IP "\(bu" 4
Run \fIlibguestfs\-test\-tool\fR\|(1) and paste the \fBcomplete, unedited\fR
output into the bug report.
