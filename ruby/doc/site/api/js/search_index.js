var search_data = {"index":{"searchIndex":["guestfs","error","guestfs","acl_delete_def_file()","acl_get_file()","acl_set_file()","add_cdrom()","add_domain()","add_drive()","add_drive_opts()","add_drive_ro()","add_drive_ro_with_if()","add_drive_scratch()","add_drive_with_if()","add_libvirt_dom()","aug_clear()","aug_close()","aug_defnode()","aug_defvar()","aug_get()","aug_init()","aug_insert()","aug_label()","aug_load()","aug_ls()","aug_match()","aug_mv()","aug_rm()","aug_save()","aug_set()","aug_setm()","available()","available_all_groups()","base64_in()","base64_out()","blkdiscard()","blkdiscardzeroes()","blkid()","blockdev_flushbufs()","blockdev_getbsz()","blockdev_getro()","blockdev_getsize64()","blockdev_getss()","blockdev_getsz()","blockdev_rereadpt()","blockdev_setbsz()","blockdev_setra()","blockdev_setro()","blockdev_setrw()","btrfs_balance_cancel()","btrfs_balance_pause()","btrfs_balance_resume()","btrfs_balance_status()","btrfs_device_add()","btrfs_device_delete()","btrfs_filesystem_balance()","btrfs_filesystem_defragment()","btrfs_filesystem_resize()","btrfs_filesystem_sync()","btrfs_fsck()","btrfs_image()","btrfs_qgroup_assign()","btrfs_qgroup_create()","btrfs_qgroup_destroy()","btrfs_qgroup_limit()","btrfs_qgroup_remove()","btrfs_qgroup_show()","btrfs_quota_enable()","btrfs_quota_rescan()","btrfs_replace()","btrfs_rescue_chunk_recover()","btrfs_rescue_super_recover()","btrfs_scrub_cancel()","btrfs_scrub_resume()","btrfs_scrub_start()","btrfs_scrub_status()","btrfs_set_seeding()","btrfs_subvolume_create()","btrfs_subvolume_create_opts()","btrfs_subvolume_delete()","btrfs_subvolume_get_default()","btrfs_subvolume_list()","btrfs_subvolume_set_default()","btrfs_subvolume_show()","btrfs_subvolume_snapshot()","btrfs_subvolume_snapshot_opts()","btrfstune_enable_extended_inode_refs()","btrfstune_enable_skinny_metadata_extent_refs()","btrfstune_seeding()","c_pointer()","canonical_device_name()","cap_get_file()","cap_set_file()","case_sensitive_path()","cat()","checksum()","checksum_device()","checksums_out()","chmod()","chown()","clear_backend_setting()","close()","command()","command_lines()","compress_device_out()","compress_out()","config()","copy_attributes()","copy_device_to_device()","copy_device_to_file()","copy_file_to_device()","copy_file_to_file()","copy_in()","copy_out()","copy_size()","cp()","cp_a()","cp_r()","cpio_out()","create()","dd()","delete_event_callback()","device_index()","df()","df_h()","disk_create()","disk_format()","disk_has_backing_file()","disk_virtual_size()","dmesg()","download()","download_offset()","drop_caches()","du()","e2fsck()","e2fsck_f()","echo_daemon()","egrep()","egrepi()","equal()","event_to_string()","exists()","extlinux()","fallocate()","fallocate64()","feature_available()","fgrep()","fgrepi()","file()","file_architecture()","filesize()","filesystem_available()","fill()","fill_dir()","fill_pattern()","find()","find0()","findfs_label()","findfs_uuid()","fsck()","fstrim()","get_append()","get_attach_method()","get_autosync()","get_backend()","get_backend_setting()","get_backend_settings()","get_cachedir()","get_direct()","get_e2attrs()","get_e2generation()","get_e2label()","get_e2uuid()","get_hv()","get_libvirt_requested_credential_challenge()","get_libvirt_requested_credential_defresult()","get_libvirt_requested_credential_prompt()","get_libvirt_requested_credentials()","get_memsize()","get_network()","get_path()","get_pgroup()","get_pid()","get_program()","get_qemu()","get_recovery_proc()","get_selinux()","get_smp()","get_state()","get_tmpdir()","get_trace()","get_umask()","get_verbose()","getcon()","getxattr()","getxattrs()","glob_expand()","grep()","grep_opts()","grepi()","grub_install()","head()","head_n()","hexdump()","hivex_close()","hivex_commit()","hivex_node_add_child()","hivex_node_children()","hivex_node_delete_child()","hivex_node_get_child()","hivex_node_get_value()","hivex_node_name()","hivex_node_parent()","hivex_node_set_value()","hivex_node_values()","hivex_open()","hivex_root()","hivex_value_key()","hivex_value_type()","hivex_value_utf8()","hivex_value_value()","initrd_cat()","initrd_list()","inotify_add_watch()","inotify_close()","inotify_files()","inotify_init()","inotify_read()","inotify_rm_watch()","inspect_get_arch()","inspect_get_distro()","inspect_get_drive_mappings()","inspect_get_filesystems()","inspect_get_format()","inspect_get_hostname()","inspect_get_icon()","inspect_get_major_version()","inspect_get_minor_version()","inspect_get_mountpoints()","inspect_get_package_format()","inspect_get_package_management()","inspect_get_product_name()","inspect_get_product_variant()","inspect_get_roots()","inspect_get_type()","inspect_get_windows_current_control_set()","inspect_get_windows_systemroot()","inspect_is_live()","inspect_is_multipart()","inspect_is_netinst()","inspect_list_applications()","inspect_list_applications2()","inspect_os()","is_blockdev()","is_blockdev_opts()","is_busy()","is_chardev()","is_chardev_opts()","is_config()","is_dir()","is_dir_opts()","is_fifo()","is_fifo_opts()","is_file()","is_file_opts()","is_launching()","is_lv()","is_ready()","is_socket()","is_socket_opts()","is_symlink()","is_whole_device()","is_zero()","is_zero_device()","isoinfo()","isoinfo_device()","journal_close()","journal_get()","journal_get_data_threshold()","journal_get_realtime_usec()","journal_next()","journal_open()","journal_set_data_threshold()","journal_skip()","kill_subprocess()","launch()","lchown()","ldmtool_create_all()","ldmtool_diskgroup_disks()","ldmtool_diskgroup_name()","ldmtool_diskgroup_volumes()","ldmtool_remove_all()","ldmtool_scan()","ldmtool_scan_devices()","ldmtool_volume_hint()","ldmtool_volume_partitions()","ldmtool_volume_type()","lgetxattr()","lgetxattrs()","list_9p()","list_devices()","list_disk_labels()","list_dm_devices()","list_filesystems()","list_ldm_partitions()","list_ldm_volumes()","list_md_devices()","list_partitions()","ll()","llz()","ln()","ln_f()","ln_s()","ln_sf()","lremovexattr()","ls()","ls0()","lsetxattr()","lstat()","lstatlist()","lstatns()","lstatnslist()","luks_add_key()","luks_close()","luks_format()","luks_format_cipher()","luks_kill_slot()","luks_open()","luks_open_ro()","lvcreate()","lvcreate_free()","lvm_canonical_lv_name()","lvm_clear_filter()","lvm_remove_all()","lvm_set_filter()","lvremove()","lvrename()","lvresize()","lvresize_free()","lvs()","lvs_full()","lvuuid()","lxattrlist()","max_disks()","md_create()","md_detail()","md_stat()","md_stop()","mkdir()","mkdir_mode()","mkdir_p()","mkdtemp()","mke2fs()","mke2fs_j()","mke2fs_jl()","mke2fs_ju()","mke2journal()","mke2journal_l()","mke2journal_u()","mkfifo()","mkfs()","mkfs_b()","mkfs_btrfs()","mkfs_opts()","mklost_and_found()","mkmountpoint()","mknod()","mknod_b()","mknod_c()","mkswap()","mkswap_l()","mkswap_u()","mkswap_file()","mkswap_opts()","mktemp()","modprobe()","mount()","mount_9p()","mount_local()","mount_local_run()","mount_loop()","mount_options()","mount_ro()","mount_vfs()","mountpoints()","mounts()","mv()","new()","nr_devices()","ntfs_3g_probe()","ntfsclone_in()","ntfsclone_out()","ntfsfix()","ntfsresize()","ntfsresize_opts()","ntfsresize_size()","parse_environment()","parse_environment_list()","part_add()","part_del()","part_disk()","part_get_bootable()","part_get_gpt_guid()","part_get_gpt_type()","part_get_mbr_id()","part_get_mbr_part_type()","part_get_name()","part_get_parttype()","part_init()","part_list()","part_set_bootable()","part_set_gpt_guid()","part_set_gpt_type()","part_set_mbr_id()","part_set_name()","part_to_dev()","part_to_partnum()","ping_daemon()","pread()","pread_device()","pvchange_uuid()","pvchange_uuid_all()","pvcreate()","pvremove()","pvresize()","pvresize_size()","pvs()","pvs_full()","pvuuid()","pwrite()","pwrite_device()","read_file()","read_lines()","readdir()","readlink()","readlinklist()","realpath()","remount()","remove_drive()","removexattr()","rename()","resize2fs()","resize2fs_m()","resize2fs_size()","rm()","rm_f()","rm_rf()","rmdir()","rmmountpoint()","rsync()","rsync_in()","rsync_out()","scrub_device()","scrub_file()","scrub_freespace()","set_append()","set_attach_method()","set_autosync()","set_backend()","set_backend_setting()","set_backend_settings()","set_cachedir()","set_direct()","set_e2attrs()","set_e2generation()","set_e2label()","set_e2uuid()","set_event_callback()","set_hv()","set_label()","set_libvirt_requested_credential()","set_libvirt_supported_credentials()","set_memsize()","set_network()","set_path()","set_pgroup()","set_program()","set_qemu()","set_recovery_proc()","set_selinux()","set_smp()","set_tmpdir()","set_trace()","set_uuid()","set_uuid_random()","set_verbose()","setcon()","setxattr()","sfdisk()","sfdiskm()","sfdisk_n()","sfdisk_disk_geometry()","sfdisk_kernel_geometry()","sfdisk_l()","sh()","sh_lines()","shutdown()","sleep()","stat()","statns()","statvfs()","strings()","strings_e()","swapoff_device()","swapoff_file()","swapoff_label()","swapoff_uuid()","swapon_device()","swapon_file()","swapon_label()","swapon_uuid()","sync()","syslinux()","tail()","tail_n()","tar_in()","tar_in_opts()","tar_out()","tar_out_opts()","tgz_in()","tgz_out()","touch()","truncate()","truncate_size()","tune2fs()","tune2fs_l()","txz_in()","txz_out()","umask()","umount()","umount_all()","umount_local()","umount_opts()","upload()","upload_offset()","user_cancel()","utimens()","utsname()","version()","vfs_label()","vfs_type()","vfs_uuid()","vg_activate()","vg_activate_all()","vgchange_uuid()","vgchange_uuid_all()","vgcreate()","vglvuuids()","vgmeta()","vgpvuuids()","vgremove()","vgrename()","vgs()","vgs_full()","vgscan()","vguuid()","wait_ready()","wc_c()","wc_l()","wc_w()","wipefs()","write()","write_append()","write_file()","xfs_admin()","xfs_growfs()","xfs_info()","xfs_repair()","zegrep()","zegrepi()","zero()","zero_device()","zero_free_space()","zerofree()","zfgrep()","zfgrepi()","zfile()","zgrep()","zgrepi()","readme"],"longSearchIndex":["guestfs","guestfs::error","guestfs::guestfs","guestfs::guestfs#acl_delete_def_file()","guestfs::guestfs#acl_get_file()","guestfs::guestfs#acl_set_file()","guestfs::guestfs#add_cdrom()","guestfs::guestfs#add_domain()","guestfs::guestfs#add_drive()","guestfs::guestfs#add_drive_opts()","guestfs::guestfs#add_drive_ro()","guestfs::guestfs#add_drive_ro_with_if()","guestfs::guestfs#add_drive_scratch()","guestfs::guestfs#add_drive_with_if()","guestfs::guestfs#add_libvirt_dom()","guestfs::guestfs#aug_clear()","guestfs::guestfs#aug_close()","guestfs::guestfs#aug_defnode()","guestfs::guestfs#aug_defvar()","guestfs::guestfs#aug_get()","guestfs::guestfs#aug_init()","guestfs::guestfs#aug_insert()","guestfs::guestfs#aug_label()","guestfs::guestfs#aug_load()","guestfs::guestfs#aug_ls()","guestfs::guestfs#aug_match()","guestfs::guestfs#aug_mv()","guestfs::guestfs#aug_rm()","guestfs::guestfs#aug_save()","guestfs::guestfs#aug_set()","guestfs::guestfs#aug_setm()","guestfs::guestfs#available()","guestfs::guestfs#available_all_groups()","guestfs::guestfs#base64_in()","guestfs::guestfs#base64_out()","guestfs::guestfs#blkdiscard()","guestfs::guestfs#blkdiscardzeroes()","guestfs::guestfs#blkid()","guestfs::guestfs#blockdev_flushbufs()","guestfs::guestfs#blockdev_getbsz()","guestfs::guestfs#blockdev_getro()","guestfs::guestfs#blockdev_getsize64()","guestfs::guestfs#blockdev_getss()","guestfs::guestfs#blockdev_getsz()","guestfs::guestfs#blockdev_rereadpt()","guestfs::guestfs#blockdev_setbsz()","guestfs::guestfs#blockdev_setra()","guestfs::guestfs#blockdev_setro()","guestfs::guestfs#blockdev_setrw()","guestfs::guestfs#btrfs_balance_cancel()","guestfs::guestfs#btrfs_balance_pause()","guestfs::guestfs#btrfs_balance_resume()","guestfs::guestfs#btrfs_balance_status()","guestfs::guestfs#btrfs_device_add()","guestfs::guestfs#btrfs_device_delete()","guestfs::guestfs#btrfs_filesystem_balance()","guestfs::guestfs#btrfs_filesystem_defragment()","guestfs::guestfs#btrfs_filesystem_resize()","guestfs::guestfs#btrfs_filesystem_sync()","guestfs::guestfs#btrfs_fsck()","guestfs::guestfs#btrfs_image()","guestfs::guestfs#btrfs_qgroup_assign()","guestfs::guestfs#btrfs_qgroup_create()","guestfs::guestfs#btrfs_qgroup_destroy()","guestfs::guestfs#btrfs_qgroup_limit()","guestfs::guestfs#btrfs_qgroup_remove()","guestfs::guestfs#btrfs_qgroup_show()","guestfs::guestfs#btrfs_quota_enable()","guestfs::guestfs#btrfs_quota_rescan()","guestfs::guestfs#btrfs_replace()","guestfs::guestfs#btrfs_rescue_chunk_recover()","guestfs::guestfs#btrfs_rescue_super_recover()","guestfs::guestfs#btrfs_scrub_cancel()","guestfs::guestfs#btrfs_scrub_resume()","guestfs::guestfs#btrfs_scrub_start()","guestfs::guestfs#btrfs_scrub_status()","guestfs::guestfs#btrfs_set_seeding()","guestfs::guestfs#btrfs_subvolume_create()","guestfs::guestfs#btrfs_subvolume_create_opts()","guestfs::guestfs#btrfs_subvolume_delete()","guestfs::guestfs#btrfs_subvolume_get_default()","guestfs::guestfs#btrfs_subvolume_list()","guestfs::guestfs#btrfs_subvolume_set_default()","guestfs::guestfs#btrfs_subvolume_show()","guestfs::guestfs#btrfs_subvolume_snapshot()","guestfs::guestfs#btrfs_subvolume_snapshot_opts()","guestfs::guestfs#btrfstune_enable_extended_inode_refs()","guestfs::guestfs#btrfstune_enable_skinny_metadata_extent_refs()","guestfs::guestfs#btrfstune_seeding()","guestfs::guestfs#c_pointer()","guestfs::guestfs#canonical_device_name()","guestfs::guestfs#cap_get_file()","guestfs::guestfs#cap_set_file()","guestfs::guestfs#case_sensitive_path()","guestfs::guestfs#cat()","guestfs::guestfs#checksum()","guestfs::guestfs#checksum_device()","guestfs::guestfs#checksums_out()","guestfs::guestfs#chmod()","guestfs::guestfs#chown()","guestfs::guestfs#clear_backend_setting()","guestfs::guestfs#close()","guestfs::guestfs#command()","guestfs::guestfs#command_lines()","guestfs::guestfs#compress_device_out()","guestfs::guestfs#compress_out()","guestfs::guestfs#config()","guestfs::guestfs#copy_attributes()","guestfs::guestfs#copy_device_to_device()","guestfs::guestfs#copy_device_to_file()","guestfs::guestfs#copy_file_to_device()","guestfs::guestfs#copy_file_to_file()","guestfs::guestfs#copy_in()","guestfs::guestfs#copy_out()","guestfs::guestfs#copy_size()","guestfs::guestfs#cp()","guestfs::guestfs#cp_a()","guestfs::guestfs#cp_r()","guestfs::guestfs#cpio_out()","guestfs::create()","guestfs::guestfs#dd()","guestfs::guestfs#delete_event_callback()","guestfs::guestfs#device_index()","guestfs::guestfs#df()","guestfs::guestfs#df_h()","guestfs::guestfs#disk_create()","guestfs::guestfs#disk_format()","guestfs::guestfs#disk_has_backing_file()","guestfs::guestfs#disk_virtual_size()","guestfs::guestfs#dmesg()","guestfs::guestfs#download()","guestfs::guestfs#download_offset()","guestfs::guestfs#drop_caches()","guestfs::guestfs#du()","guestfs::guestfs#e2fsck()","guestfs::guestfs#e2fsck_f()","guestfs::guestfs#echo_daemon()","guestfs::guestfs#egrep()","guestfs::guestfs#egrepi()","guestfs::guestfs#equal()","guestfs::event_to_string()","guestfs::guestfs#exists()","guestfs::guestfs#extlinux()","guestfs::guestfs#fallocate()","guestfs::guestfs#fallocate64()","guestfs::guestfs#feature_available()","guestfs::guestfs#fgrep()","guestfs::guestfs#fgrepi()","guestfs::guestfs#file()","guestfs::guestfs#file_architecture()","guestfs::guestfs#filesize()","guestfs::guestfs#filesystem_available()","guestfs::guestfs#fill()","guestfs::guestfs#fill_dir()","guestfs::guestfs#fill_pattern()","guestfs::guestfs#find()","guestfs::guestfs#find0()","guestfs::guestfs#findfs_label()","guestfs::guestfs#findfs_uuid()","guestfs::guestfs#fsck()","guestfs::guestfs#fstrim()","guestfs::guestfs#get_append()","guestfs::guestfs#get_attach_method()","guestfs::guestfs#get_autosync()","guestfs::guestfs#get_backend()","guestfs::guestfs#get_backend_setting()","guestfs::guestfs#get_backend_settings()","guestfs::guestfs#get_cachedir()","guestfs::guestfs#get_direct()","guestfs::guestfs#get_e2attrs()","guestfs::guestfs#get_e2generation()","guestfs::guestfs#get_e2label()","guestfs::guestfs#get_e2uuid()","guestfs::guestfs#get_hv()","guestfs::guestfs#get_libvirt_requested_credential_challenge()","guestfs::guestfs#get_libvirt_requested_credential_defresult()","guestfs::guestfs#get_libvirt_requested_credential_prompt()","guestfs::guestfs#get_libvirt_requested_credentials()","guestfs::guestfs#get_memsize()","guestfs::guestfs#get_network()","guestfs::guestfs#get_path()","guestfs::guestfs#get_pgroup()","guestfs::guestfs#get_pid()","guestfs::guestfs#get_program()","guestfs::guestfs#get_qemu()","guestfs::guestfs#get_recovery_proc()","guestfs::guestfs#get_selinux()","guestfs::guestfs#get_smp()","guestfs::guestfs#get_state()","guestfs::guestfs#get_tmpdir()","guestfs::guestfs#get_trace()","guestfs::guestfs#get_umask()","guestfs::guestfs#get_verbose()","guestfs::guestfs#getcon()","guestfs::guestfs#getxattr()","guestfs::guestfs#getxattrs()","guestfs::guestfs#glob_expand()","guestfs::guestfs#grep()","guestfs::guestfs#grep_opts()","guestfs::guestfs#grepi()","guestfs::guestfs#grub_install()","guestfs::guestfs#head()","guestfs::guestfs#head_n()","guestfs::guestfs#hexdump()","guestfs::guestfs#hivex_close()","guestfs::guestfs#hivex_commit()","guestfs::guestfs#hivex_node_add_child()","guestfs::guestfs#hivex_node_children()","guestfs::guestfs#hivex_node_delete_child()","guestfs::guestfs#hivex_node_get_child()","guestfs::guestfs#hivex_node_get_value()","guestfs::guestfs#hivex_node_name()","guestfs::guestfs#hivex_node_parent()","guestfs::guestfs#hivex_node_set_value()","guestfs::guestfs#hivex_node_values()","guestfs::guestfs#hivex_open()","guestfs::guestfs#hivex_root()","guestfs::guestfs#hivex_value_key()","guestfs::guestfs#hivex_value_type()","guestfs::guestfs#hivex_value_utf8()","guestfs::guestfs#hivex_value_value()","guestfs::guestfs#initrd_cat()","guestfs::guestfs#initrd_list()","guestfs::guestfs#inotify_add_watch()","guestfs::guestfs#inotify_close()","guestfs::guestfs#inotify_files()","guestfs::guestfs#inotify_init()","guestfs::guestfs#inotify_read()","guestfs::guestfs#inotify_rm_watch()","guestfs::guestfs#inspect_get_arch()","guestfs::guestfs#inspect_get_distro()","guestfs::guestfs#inspect_get_drive_mappings()","guestfs::guestfs#inspect_get_filesystems()","guestfs::guestfs#inspect_get_format()","guestfs::guestfs#inspect_get_hostname()","guestfs::guestfs#inspect_get_icon()","guestfs::guestfs#inspect_get_major_version()","guestfs::guestfs#inspect_get_minor_version()","guestfs::guestfs#inspect_get_mountpoints()","guestfs::guestfs#inspect_get_package_format()","guestfs::guestfs#inspect_get_package_management()","guestfs::guestfs#inspect_get_product_name()","guestfs::guestfs#inspect_get_product_variant()","guestfs::guestfs#inspect_get_roots()","guestfs::guestfs#inspect_get_type()","guestfs::guestfs#inspect_get_windows_current_control_set()","guestfs::guestfs#inspect_get_windows_systemroot()","guestfs::guestfs#inspect_is_live()","guestfs::guestfs#inspect_is_multipart()","guestfs::guestfs#inspect_is_netinst()","guestfs::guestfs#inspect_list_applications()","guestfs::guestfs#inspect_list_applications2()","guestfs::guestfs#inspect_os()","guestfs::guestfs#is_blockdev()","guestfs::guestfs#is_blockdev_opts()","guestfs::guestfs#is_busy()","guestfs::guestfs#is_chardev()","guestfs::guestfs#is_chardev_opts()","guestfs::guestfs#is_config()","guestfs::guestfs#is_dir()","guestfs::guestfs#is_dir_opts()","guestfs::guestfs#is_fifo()","guestfs::guestfs#is_fifo_opts()","guestfs::guestfs#is_file()","guestfs::guestfs#is_file_opts()","guestfs::guestfs#is_launching()","guestfs::guestfs#is_lv()","guestfs::guestfs#is_ready()","guestfs::guestfs#is_socket()","guestfs::guestfs#is_socket_opts()","guestfs::guestfs#is_symlink()","guestfs::guestfs#is_whole_device()","guestfs::guestfs#is_zero()","guestfs::guestfs#is_zero_device()","guestfs::guestfs#isoinfo()","guestfs::guestfs#isoinfo_device()","guestfs::guestfs#journal_close()","guestfs::guestfs#journal_get()","guestfs::guestfs#journal_get_data_threshold()","guestfs::guestfs#journal_get_realtime_usec()","guestfs::guestfs#journal_next()","guestfs::guestfs#journal_open()","guestfs::guestfs#journal_set_data_threshold()","guestfs::guestfs#journal_skip()","guestfs::guestfs#kill_subprocess()","guestfs::guestfs#launch()","guestfs::guestfs#lchown()","guestfs::guestfs#ldmtool_create_all()","guestfs::guestfs#ldmtool_diskgroup_disks()","guestfs::guestfs#ldmtool_diskgroup_name()","guestfs::guestfs#ldmtool_diskgroup_volumes()","guestfs::guestfs#ldmtool_remove_all()","guestfs::guestfs#ldmtool_scan()","guestfs::guestfs#ldmtool_scan_devices()","guestfs::guestfs#ldmtool_volume_hint()","guestfs::guestfs#ldmtool_volume_partitions()","guestfs::guestfs#ldmtool_volume_type()","guestfs::guestfs#lgetxattr()","guestfs::guestfs#lgetxattrs()","guestfs::guestfs#list_9p()","guestfs::guestfs#list_devices()","guestfs::guestfs#list_disk_labels()","guestfs::guestfs#list_dm_devices()","guestfs::guestfs#list_filesystems()","guestfs::guestfs#list_ldm_partitions()","guestfs::guestfs#list_ldm_volumes()","guestfs::guestfs#list_md_devices()","guestfs::guestfs#list_partitions()","guestfs::guestfs#ll()","guestfs::guestfs#llz()","guestfs::guestfs#ln()","guestfs::guestfs#ln_f()","guestfs::guestfs#ln_s()","guestfs::guestfs#ln_sf()","guestfs::guestfs#lremovexattr()","guestfs::guestfs#ls()","guestfs::guestfs#ls0()","guestfs::guestfs#lsetxattr()","guestfs::guestfs#lstat()","guestfs::guestfs#lstatlist()","guestfs::guestfs#lstatns()","guestfs::guestfs#lstatnslist()","guestfs::guestfs#luks_add_key()","guestfs::guestfs#luks_close()","guestfs::guestfs#luks_format()","guestfs::guestfs#luks_format_cipher()","guestfs::guestfs#luks_kill_slot()","guestfs::guestfs#luks_open()","guestfs::guestfs#luks_open_ro()","guestfs::guestfs#lvcreate()","guestfs::guestfs#lvcreate_free()","guestfs::guestfs#lvm_canonical_lv_name()","guestfs::guestfs#lvm_clear_filter()","guestfs::guestfs#lvm_remove_all()","guestfs::guestfs#lvm_set_filter()","guestfs::guestfs#lvremove()","guestfs::guestfs#lvrename()","guestfs::guestfs#lvresize()","guestfs::guestfs#lvresize_free()","guestfs::guestfs#lvs()","guestfs::guestfs#lvs_full()","guestfs::guestfs#lvuuid()","guestfs::guestfs#lxattrlist()","guestfs::guestfs#max_disks()","guestfs::guestfs#md_create()","guestfs::guestfs#md_detail()","guestfs::guestfs#md_stat()","guestfs::guestfs#md_stop()","guestfs::guestfs#mkdir()","guestfs::guestfs#mkdir_mode()","guestfs::guestfs#mkdir_p()","guestfs::guestfs#mkdtemp()","guestfs::guestfs#mke2fs()","guestfs::guestfs#mke2fs_j()","guestfs::guestfs#mke2fs_jl()","guestfs::guestfs#mke2fs_ju()","guestfs::guestfs#mke2journal()","guestfs::guestfs#mke2journal_l()","guestfs::guestfs#mke2journal_u()","guestfs::guestfs#mkfifo()","guestfs::guestfs#mkfs()","guestfs::guestfs#mkfs_b()","guestfs::guestfs#mkfs_btrfs()","guestfs::guestfs#mkfs_opts()","guestfs::guestfs#mklost_and_found()","guestfs::guestfs#mkmountpoint()","guestfs::guestfs#mknod()","guestfs::guestfs#mknod_b()","guestfs::guestfs#mknod_c()","guestfs::guestfs#mkswap()","guestfs::guestfs#mkswap_l()","guestfs::guestfs#mkswap_u()","guestfs::guestfs#mkswap_file()","guestfs::guestfs#mkswap_opts()","guestfs::guestfs#mktemp()","guestfs::guestfs#modprobe()","guestfs::guestfs#mount()","guestfs::guestfs#mount_9p()","guestfs::guestfs#mount_local()","guestfs::guestfs#mount_local_run()","guestfs::guestfs#mount_loop()","guestfs::guestfs#mount_options()","guestfs::guestfs#mount_ro()","guestfs::guestfs#mount_vfs()","guestfs::guestfs#mountpoints()","guestfs::guestfs#mounts()","guestfs::guestfs#mv()","guestfs::guestfs::new()","guestfs::guestfs#nr_devices()","guestfs::guestfs#ntfs_3g_probe()","guestfs::guestfs#ntfsclone_in()","guestfs::guestfs#ntfsclone_out()","guestfs::guestfs#ntfsfix()","guestfs::guestfs#ntfsresize()","guestfs::guestfs#ntfsresize_opts()","guestfs::guestfs#ntfsresize_size()","guestfs::guestfs#parse_environment()","guestfs::guestfs#parse_environment_list()","guestfs::guestfs#part_add()","guestfs::guestfs#part_del()","guestfs::guestfs#part_disk()","guestfs::guestfs#part_get_bootable()","guestfs::guestfs#part_get_gpt_guid()","guestfs::guestfs#part_get_gpt_type()","guestfs::guestfs#part_get_mbr_id()","guestfs::guestfs#part_get_mbr_part_type()","guestfs::guestfs#part_get_name()","guestfs::guestfs#part_get_parttype()","guestfs::guestfs#part_init()","guestfs::guestfs#part_list()","guestfs::guestfs#part_set_bootable()","guestfs::guestfs#part_set_gpt_guid()","guestfs::guestfs#part_set_gpt_type()","guestfs::guestfs#part_set_mbr_id()","guestfs::guestfs#part_set_name()","guestfs::guestfs#part_to_dev()","guestfs::guestfs#part_to_partnum()","guestfs::guestfs#ping_daemon()","guestfs::guestfs#pread()","guestfs::guestfs#pread_device()","guestfs::guestfs#pvchange_uuid()","guestfs::guestfs#pvchange_uuid_all()","guestfs::guestfs#pvcreate()","guestfs::guestfs#pvremove()","guestfs::guestfs#pvresize()","guestfs::guestfs#pvresize_size()","guestfs::guestfs#pvs()","guestfs::guestfs#pvs_full()","guestfs::guestfs#pvuuid()","guestfs::guestfs#pwrite()","guestfs::guestfs#pwrite_device()","guestfs::guestfs#read_file()","guestfs::guestfs#read_lines()","guestfs::guestfs#readdir()","guestfs::guestfs#readlink()","guestfs::guestfs#readlinklist()","guestfs::guestfs#realpath()","guestfs::guestfs#remount()","guestfs::guestfs#remove_drive()","guestfs::guestfs#removexattr()","guestfs::guestfs#rename()","guestfs::guestfs#resize2fs()","guestfs::guestfs#resize2fs_m()","guestfs::guestfs#resize2fs_size()","guestfs::guestfs#rm()","guestfs::guestfs#rm_f()","guestfs::guestfs#rm_rf()","guestfs::guestfs#rmdir()","guestfs::guestfs#rmmountpoint()","guestfs::guestfs#rsync()","guestfs::guestfs#rsync_in()","guestfs::guestfs#rsync_out()","guestfs::guestfs#scrub_device()","guestfs::guestfs#scrub_file()","guestfs::guestfs#scrub_freespace()","guestfs::guestfs#set_append()","guestfs::guestfs#set_attach_method()","guestfs::guestfs#set_autosync()","guestfs::guestfs#set_backend()","guestfs::guestfs#set_backend_setting()","guestfs::guestfs#set_backend_settings()","guestfs::guestfs#set_cachedir()","guestfs::guestfs#set_direct()","guestfs::guestfs#set_e2attrs()","guestfs::guestfs#set_e2generation()","guestfs::guestfs#set_e2label()","guestfs::guestfs#set_e2uuid()","guestfs::guestfs#set_event_callback()","guestfs::guestfs#set_hv()","guestfs::guestfs#set_label()","guestfs::guestfs#set_libvirt_requested_credential()","guestfs::guestfs#set_libvirt_supported_credentials()","guestfs::guestfs#set_memsize()","guestfs::guestfs#set_network()","guestfs::guestfs#set_path()","guestfs::guestfs#set_pgroup()","guestfs::guestfs#set_program()","guestfs::guestfs#set_qemu()","guestfs::guestfs#set_recovery_proc()","guestfs::guestfs#set_selinux()","guestfs::guestfs#set_smp()","guestfs::guestfs#set_tmpdir()","guestfs::guestfs#set_trace()","guestfs::guestfs#set_uuid()","guestfs::guestfs#set_uuid_random()","guestfs::guestfs#set_verbose()","guestfs::guestfs#setcon()","guestfs::guestfs#setxattr()","guestfs::guestfs#sfdisk()","guestfs::guestfs#sfdiskm()","guestfs::guestfs#sfdisk_n()","guestfs::guestfs#sfdisk_disk_geometry()","guestfs::guestfs#sfdisk_kernel_geometry()","guestfs::guestfs#sfdisk_l()","guestfs::guestfs#sh()","guestfs::guestfs#sh_lines()","guestfs::guestfs#shutdown()","guestfs::guestfs#sleep()","guestfs::guestfs#stat()","guestfs::guestfs#statns()","guestfs::guestfs#statvfs()","guestfs::guestfs#strings()","guestfs::guestfs#strings_e()","guestfs::guestfs#swapoff_device()","guestfs::guestfs#swapoff_file()","guestfs::guestfs#swapoff_label()","guestfs::guestfs#swapoff_uuid()","guestfs::guestfs#swapon_device()","guestfs::guestfs#swapon_file()","guestfs::guestfs#swapon_label()","guestfs::guestfs#swapon_uuid()","guestfs::guestfs#sync()","guestfs::guestfs#syslinux()","guestfs::guestfs#tail()","guestfs::guestfs#tail_n()","guestfs::guestfs#tar_in()","guestfs::guestfs#tar_in_opts()","guestfs::guestfs#tar_out()","guestfs::guestfs#tar_out_opts()","guestfs::guestfs#tgz_in()","guestfs::guestfs#tgz_out()","guestfs::guestfs#touch()","guestfs::guestfs#truncate()","guestfs::guestfs#truncate_size()","guestfs::guestfs#tune2fs()","guestfs::guestfs#tune2fs_l()","guestfs::guestfs#txz_in()","guestfs::guestfs#txz_out()","guestfs::guestfs#umask()","guestfs::guestfs#umount()","guestfs::guestfs#umount_all()","guestfs::guestfs#umount_local()","guestfs::guestfs#umount_opts()","guestfs::guestfs#upload()","guestfs::guestfs#upload_offset()","guestfs::guestfs#user_cancel()","guestfs::guestfs#utimens()","guestfs::guestfs#utsname()","guestfs::guestfs#version()","guestfs::guestfs#vfs_label()","guestfs::guestfs#vfs_type()","guestfs::guestfs#vfs_uuid()","guestfs::guestfs#vg_activate()","guestfs::guestfs#vg_activate_all()","guestfs::guestfs#vgchange_uuid()","guestfs::guestfs#vgchange_uuid_all()","guestfs::guestfs#vgcreate()","guestfs::guestfs#vglvuuids()","guestfs::guestfs#vgmeta()","guestfs::guestfs#vgpvuuids()","guestfs::guestfs#vgremove()","guestfs::guestfs#vgrename()","guestfs::guestfs#vgs()","guestfs::guestfs#vgs_full()","guestfs::guestfs#vgscan()","guestfs::guestfs#vguuid()","guestfs::guestfs#wait_ready()","guestfs::guestfs#wc_c()","guestfs::guestfs#wc_l()","guestfs::guestfs#wc_w()","guestfs::guestfs#wipefs()","guestfs::guestfs#write()","guestfs::guestfs#write_append()","guestfs::guestfs#write_file()","guestfs::guestfs#xfs_admin()","guestfs::guestfs#xfs_growfs()","guestfs::guestfs#xfs_info()","guestfs::guestfs#xfs_repair()","guestfs::guestfs#zegrep()","guestfs::guestfs#zegrepi()","guestfs::guestfs#zero()","guestfs::guestfs#zero_device()","guestfs::guestfs#zero_free_space()","guestfs::guestfs#zerofree()","guestfs::guestfs#zfgrep()","guestfs::guestfs#zfgrepi()","guestfs::guestfs#zfile()","guestfs::guestfs#zgrep()","guestfs::guestfs#zgrepi()",""],"info":[["Guestfs","","Guestfs.html","",""],["Guestfs::Error","","Guestfs/Error.html","",""],["Guestfs::Guestfs","","Guestfs/Guestfs.html","",""],["acl_delete_def_file","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-acl_delete_def_file","(p1)","<p>delete the default POSIX ACL of a directory\n<p>This function deletes the default POSIX Access Control List …\n"],["acl_get_file","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-acl_get_file","(p1, p2)","<p>get the POSIX ACL attached to a file\n<p>This function returns the POSIX Access Control List (ACL) attached …\n"],["acl_set_file","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-acl_set_file","(p1, p2, p3)","<p>set the POSIX ACL attached to a file\n<p>This function sets the POSIX Access Control List (ACL) attached to …\n"],["add_cdrom","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-add_cdrom","(p1)","<p>add a CD-ROM disk image to examine\n<p>This function adds a virtual CD-ROM disk image to the guest.\n<p>The image …\n"],["add_domain","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-add_domain","(*args)","<p>add the disk(s) from a named libvirt domain\n<p>This function adds the disk(s) attached to the named libvirt …\n"],["add_drive","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-add_drive","(*args)","<p>add an image to examine or modify\n<p>This function adds a disk image called filename to the handle. filename …\n"],["add_drive_opts","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-add_drive_opts","(*args)","<p>add an image to examine or modify\n<p>This function adds a disk image called filename to the handle. filename …\n"],["add_drive_ro","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-add_drive_ro","(p1)","<p>add a drive in snapshot mode (read-only)\n<p>This function is the equivalent of calling “g.add_drive_opts” …\n"],["add_drive_ro_with_if","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-add_drive_ro_with_if","(p1, p2)","<p>add a drive read-only specifying the QEMU block emulation to use\n<p>This is the same as “g.add_drive_ro” …\n"],["add_drive_scratch","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-add_drive_scratch","(*args)","<p>add a temporary scratch drive\n<p>This command adds a temporary scratch drive to the handle. The “size” …\n"],["add_drive_with_if","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-add_drive_with_if","(p1, p2)","<p>add a drive specifying the QEMU block emulation to use\n<p>This is the same as “g.add_drive” but …\n"],["add_libvirt_dom","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-add_libvirt_dom","(*args)","<p>add the disk(s) from a libvirt domain\n<p>This function adds the disk(s) attached to the libvirt domain “dom”. …\n"],["aug_clear","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-aug_clear","(p1)","<p>clear Augeas path\n<p>Set the value associated with “path” to “NULL”. This is the same …\n"],["aug_close","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-aug_close","()","<p>close the current Augeas handle\n<p>Close the current Augeas handle and free up any resources used by it. …\n"],["aug_defnode","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-aug_defnode","(p1, p2, p3)","<p>define an Augeas node\n<p>Defines a variable “name” whose value is the result of evaluating “expr”. …\n"],["aug_defvar","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-aug_defvar","(p1, p2)","<p>define an Augeas variable\n<p>Defines an Augeas variable “name” whose value is the result of evaluating …\n"],["aug_get","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-aug_get","(p1)","<p>look up the value of an Augeas path\n<p>Look up the value associated with “path”. If “path” …\n"],["aug_init","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-aug_init","(p1, p2)","<p>create a new Augeas handle\n<p>Create a new Augeas handle for editing configuration files. If there was\nany …\n"],["aug_insert","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-aug_insert","(p1, p2, p3)","<p>insert a sibling Augeas node\n<p>Create a new sibling “label” for “path”, inserting it …\n"],["aug_label","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-aug_label","(p1)","<p>return the label from an Augeas path expression\n<p>The label (name of the last element) of the Augeas path …\n"],["aug_load","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-aug_load","()","<p>load files into the tree\n<p>Load files into the tree.\n<p>See “aug_load” in the Augeas documentation …\n"],["aug_ls","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-aug_ls","(p1)","<p>list Augeas nodes under augpath\n<p>This is just a shortcut for listing “g.aug_match” “path/ …\n"],["aug_match","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-aug_match","(p1)","<p>return Augeas nodes which match augpath\n<p>Returns a list of paths which match the path expression “path”. …\n"],["aug_mv","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-aug_mv","(p1, p2)","<p>move Augeas node\n<p>Move the node “src” to “dest”. “src” must match exactly …\n"],["aug_rm","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-aug_rm","(p1)","<p>remove an Augeas path\n<p>Remove “path” and all of its children.\n<p>On success this returns the number …\n"],["aug_save","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-aug_save","()","<p>write all pending Augeas changes to disk\n<p>This writes all pending changes to disk.\n<p>The flags which were …\n"],["aug_set","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-aug_set","(p1, p2)","<p>set Augeas path to value\n<p>Set the value associated with “path” to “val”.\n<p>In the Augeas …\n"],["aug_setm","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-aug_setm","(p1, p2, p3)","<p>set multiple Augeas nodes\n<p>Change multiple Augeas nodes in a single operation. “base” is an expression\n…\n"],["available","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-available","(p1)","<p>test availability of some parts of the API\n<p>This command is used to check the availability of some groups …\n"],["available_all_groups","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-available_all_groups","()","<p>return a list of all optional groups\n<p>This command returns a list of all optional groups that this daemon …\n"],["base64_in","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-base64_in","(p1, p2)","<p>upload base64-encoded data to file\n<p>This command uploads base64-encoded data from “base64file” …\n"],["base64_out","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-base64_out","(p1, p2)","<p>download file and encode as base64\n<p>This command downloads the contents of filename, writing it out to …\n"],["blkdiscard","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-blkdiscard","(p1)","<p>discard all blocks on a device\n<p>This discards all blocks on the block device “device”, giving …\n"],["blkdiscardzeroes","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-blkdiscardzeroes","(p1)","<p>return true if discarded blocks are read as zeroes\n<p>This call returns true if blocks on “device” …\n"],["blkid","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-blkid","(p1)","<p>print block device attributes\n<p>This command returns block device attributes for “device”. The …\n"],["blockdev_flushbufs","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-blockdev_flushbufs","(p1)","<p>flush device buffers\n<p>This tells the kernel to flush internal buffers associated with “device”. …\n"],["blockdev_getbsz","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-blockdev_getbsz","(p1)","<p>get blocksize of block device\n<p>This returns the block size of a device.\n<p>Note: this is different from both …\n"],["blockdev_getro","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-blockdev_getro","(p1)","<p>is block device set to read-only\n<p>Returns a boolean indicating if the block device is read-only (true if …\n"],["blockdev_getsize64","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-blockdev_getsize64","(p1)","<p>get total size of device in bytes\n<p>This returns the size of the device in bytes.\n<p>See also “g.blockdev_getsz”. …\n"],["blockdev_getss","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-blockdev_getss","(p1)","<p>get sectorsize of block device\n<p>This returns the size of sectors on a block device. Usually 512, but can …\n"],["blockdev_getsz","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-blockdev_getsz","(p1)","<p>get total size of device in 512-byte sectors\n<p>This returns the size of the device in units of 512-byte …\n"],["blockdev_rereadpt","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-blockdev_rereadpt","(p1)","<p>reread partition table\n<p>Reread the partition table on “device”.\n<p>This uses the blockdev(8) command. …\n"],["blockdev_setbsz","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-blockdev_setbsz","(p1, p2)","<p>set blocksize of block device\n<p>This call does nothing and has never done anything because of a bug in\nblockdev. …\n"],["blockdev_setra","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-blockdev_setra","(p1, p2)","<p>set readahead\n<p>Set readahead (in 512-byte sectors) for the device.\n<p>This uses the blockdev(8) command.\n"],["blockdev_setro","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-blockdev_setro","(p1)","<p>set block device to read-only\n<p>Sets the block device named “device” to read-only.\n<p>This uses the …\n"],["blockdev_setrw","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-blockdev_setrw","(p1)","<p>set block device to read-write\n<p>Sets the block device named “device” to read-write.\n<p>This uses …\n"],["btrfs_balance_cancel","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_balance_cancel","(p1)","<p>cancel a running or paused balance\n<p>Cancel a running balance on a btrfs filesystem.\n<p>(For the C API documentation …\n"],["btrfs_balance_pause","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_balance_pause","(p1)","<p>pause a running balance\n<p>Pause a running balance on a btrfs filesystem.\n<p>(For the C API documentation for …\n"],["btrfs_balance_resume","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_balance_resume","(p1)","<p>resume a paused balance\n<p>Resume a paused balance on a btrfs filesystem.\n<p>(For the C API documentation for …\n"],["btrfs_balance_status","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_balance_status","(p1)","<p>show the status of a running or paused balance\n<p>Show the status of a running or paused balance on a btrfs …\n"],["btrfs_device_add","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_device_add","(p1, p2)","<p>add devices to a btrfs filesystem\n<p>Add the list of device(s) in “devices” to the btrfs filesystem …\n"],["btrfs_device_delete","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_device_delete","(p1, p2)","<p>remove devices from a btrfs filesystem\n<p>Remove the “devices” from the btrfs filesystem mounted …\n"],["btrfs_filesystem_balance","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_filesystem_balance","(p1)","<p>balance a btrfs filesystem\n<p>Balance the chunks in the btrfs filesystem mounted at “fs” across …\n"],["btrfs_filesystem_defragment","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_filesystem_defragment","(*args)","<p>defragment a file or directory\n<p>Defragment a file or directory on a btrfs filesystem. compress is one of …\n"],["btrfs_filesystem_resize","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_filesystem_resize","(*args)","<p>resize a btrfs filesystem\n<p>This command resizes a btrfs filesystem.\n<p>Note that unlike other resize calls, …\n"],["btrfs_filesystem_sync","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_filesystem_sync","(p1)","<p>sync a btrfs filesystem\n<p>Force sync on the btrfs filesystem mounted at “fs”.\n<p>(For the C API documentation …\n"],["btrfs_fsck","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_fsck","(*args)","<p>check a btrfs filesystem\n<p>Used to check a btrfs filesystem, “device” is the device file where …\n"],["btrfs_image","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_image","(*args)","<p>create an image of a btrfs filesystem\n<p>This is used to create an image of a btrfs filesystem. All data …\n"],["btrfs_qgroup_assign","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_qgroup_assign","(p1, p2, p3)","<p>add a qgroup to a parent qgroup\n<p>Add qgroup “src” to parent qgroup “dst”. This command …\n"],["btrfs_qgroup_create","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_qgroup_create","(p1, p2)","<p>create a subvolume quota group\n<p>Create a quota group (qgroup) for subvolume at “subvolume”.\n<p>(For …\n"],["btrfs_qgroup_destroy","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_qgroup_destroy","(p1, p2)","<p>destroy a subvolume quota group\n<p>Destroy a quota group.\n<p>(For the C API documentation for this function, …\n"],["btrfs_qgroup_limit","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_qgroup_limit","(p1, p2)","<p>limit the size of a subvolume\n<p>Limit the size of a subvolume which’s path is “subvolume”. “size” …\n"],["btrfs_qgroup_remove","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_qgroup_remove","(p1, p2, p3)","<p>remove a qgroup from its parent qgroup\n<p>Remove qgroup “src” from the parent qgroup “dst”. …\n"],["btrfs_qgroup_show","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_qgroup_show","(p1)","<p>show subvolume quota groups\n<p>Show all subvolume quota groups in a btrfs filesystem, including their\nusages. …\n"],["btrfs_quota_enable","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_quota_enable","(p1, p2)","<p>enable or disable subvolume quota support\n<p>Enable or disable subvolume quota support for filesystem which …\n"],["btrfs_quota_rescan","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_quota_rescan","(p1)","<p>trash all qgroup numbers and scan the metadata again with the current\nconfig\n<p>Trash all qgroup numbers …\n"],["btrfs_replace","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_replace","(p1, p2, p3)","<p>replace a btrfs managed device with another device\n<p>Replace device of a btrfs filesystem. On a live filesystem, …\n"],["btrfs_rescue_chunk_recover","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_rescue_chunk_recover","(p1)","<p>recover the chunk tree of btrfs filesystem\n<p>Recover the chunk tree of btrfs filesystem by scanning the …\n"],["btrfs_rescue_super_recover","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_rescue_super_recover","(p1)","<p>recover bad superblocks from good copies\n<p>Recover bad superblocks from good copies.\n<p>(For the C API documentation …\n"],["btrfs_scrub_cancel","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_scrub_cancel","(p1)","<p>cancel a running scrub\n<p>Cancel a running scrub on a btrfs filesystem.\n<p>(For the C API documentation for this …\n"],["btrfs_scrub_resume","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_scrub_resume","(p1)","<p>resume a previously canceled or interrupted scrub\n<p>Resume a previously canceled or interrupted scrub on …\n"],["btrfs_scrub_start","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_scrub_start","(p1)","<p>read all data from all disks and verify checksums\n<p>Reads all the data and metadata on the filesystem, and …\n"],["btrfs_scrub_status","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_scrub_status","(p1)","<p>show status of running or finished scrub\n<p>Show status of running or finished scrub on a btrfs filesystem. …\n"],["btrfs_set_seeding","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_set_seeding","(p1, p2)","<p>enable or disable the seeding feature of device\n<p>Enable or disable the seeding feature of a device that …\n"],["btrfs_subvolume_create","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_subvolume_create","(*args)","<p>create a btrfs subvolume\n<p>Create a btrfs subvolume. The “dest” argument is the destination directory\n…\n"],["btrfs_subvolume_create_opts","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_subvolume_create_opts","(*args)","<p>create a btrfs subvolume\n<p>Create a btrfs subvolume. The “dest” argument is the destination directory\n…\n"],["btrfs_subvolume_delete","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_subvolume_delete","(p1)","<p>delete a btrfs subvolume or snapshot\n<p>Delete the named btrfs subvolume or snapshot.\n<p>(For the C API documentation …\n"],["btrfs_subvolume_get_default","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_subvolume_get_default","(p1)","<p>get the default subvolume or snapshot of a filesystem\n<p>Get the default subvolume or snapshot of a filesystem …\n"],["btrfs_subvolume_list","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_subvolume_list","(p1)","<p>list btrfs snapshots and subvolumes\n<p>List the btrfs snapshots and subvolumes of the btrfs filesystem which …\n"],["btrfs_subvolume_set_default","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_subvolume_set_default","(p1, p2)","<p>set default btrfs subvolume\n<p>Set the subvolume of the btrfs filesystem “fs” which will be mounted …\n"],["btrfs_subvolume_show","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_subvolume_show","(p1)","<p>return detailed information of the subvolume\n<p>Return detailed information of the subvolume.\n<p>(For the C  …\n"],["btrfs_subvolume_snapshot","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_subvolume_snapshot","(*args)","<p>create a btrfs snapshot\n<p>Create a snapshot of the btrfs subvolume “source”. The “dest” …\n"],["btrfs_subvolume_snapshot_opts","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfs_subvolume_snapshot_opts","(*args)","<p>create a btrfs snapshot\n<p>Create a snapshot of the btrfs subvolume “source”. The “dest” …\n"],["btrfstune_enable_extended_inode_refs","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfstune_enable_extended_inode_refs","(p1)","<p>enable extended inode refs\n<p>This will Enable extended inode refs.\n<p>(For the C API documentation for this …\n"],["btrfstune_enable_skinny_metadata_extent_refs","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfstune_enable_skinny_metadata_extent_refs","(p1)","<p>enable skinny metadata extent refs\n<p>This enable skinny metadata extent refs.\n<p>(For the C API documentation …\n"],["btrfstune_seeding","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-btrfstune_seeding","(p1, p2)","<p>enable or disable seeding of a btrfs device\n<p>Enable seeding of a btrfs device, this will force a fs readonly …\n"],["c_pointer","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-c_pointer","()","<p>return the C pointer to the guestfs_h handle\n<p>In non-C language bindings, this allows you to retrieve the …\n"],["canonical_device_name","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-canonical_device_name","(p1)","<p>return canonical device name\n<p>This utility function is useful when displaying device names to the user. …\n"],["cap_get_file","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-cap_get_file","(p1)","<p>get the Linux capabilities attached to a file\n<p>This function returns the Linux capabilities attached to …\n"],["cap_set_file","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-cap_set_file","(p1, p2)","<p>set the Linux capabilities attached to a file\n<p>This function sets the Linux capabilities attached to “path”. …\n"],["case_sensitive_path","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-case_sensitive_path","(p1)","<p>return true path on case-insensitive filesystem\n<p>This can be used to resolve case insensitive paths on …\n"],["cat","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-cat","(p1)","<p>list the contents of a file\n<p>Return the contents of the file named “path”.\n<p>Because, in C, this …\n"],["checksum","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-checksum","(p1, p2)","<p>compute MD5, SHAx or CRC checksum of file\n<p>This call computes the MD5, SHAx or CRC checksum of the file …\n"],["checksum_device","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-checksum_device","(p1, p2)","<p>compute MD5, SHAx or CRC checksum of the contents of a device\n<p>This call computes the MD5, SHAx or CRC …\n"],["checksums_out","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-checksums_out","(p1, p2, p3)","<p>compute MD5, SHAx or CRC checksum of files in a directory\n<p>This command computes the checksums of all regular …\n"],["chmod","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-chmod","(p1, p2)","<p>change file mode\n<p>Change the mode (permissions) of “path” to “mode”. Only numeric modes …\n"],["chown","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-chown","(p1, p2, p3)","<p>change file owner and group\n<p>Change the file owner to “owner” and group to “group”. …\n"],["clear_backend_setting","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-clear_backend_setting","(p1)","<p>remove a single per-backend settings string\n<p>If there is a backend setting string matching “name” …\n"],["close","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-close","()","<p>Call\n<code>guestfs_close[http://libguestfs.org/guestfs.3.html#guestfs_close]</code>\nto close the libguestfs handle. …\n"],["command","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-command","(p1)","<p>run a command from the guest filesystem\n<p>This call runs a command from the guest filesystem. The filesystem …\n"],["command_lines","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-command_lines","(p1)","<p>run a command, returning lines\n<p>This is the same as “g.command”, but splits the result into a …\n"],["compress_device_out","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-compress_device_out","(*args)","<p>output compressed device\n<p>This command compresses “device” and writes it out to the local file …\n"],["compress_out","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-compress_out","(*args)","<p>output compressed file\n<p>This command compresses file and writes it out to the local file zfile.\n<p>The compression …\n"],["config","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-config","(p1, p2)","<p>add hypervisor parameters\n<p>This can be used to add arbitrary hypervisor parameters of the form *-param\n…\n"],["copy_attributes","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-copy_attributes","(*args)","<p>copy the attributes of a path (file/directory) to another\n<p>Copy the attributes of a path (which can be …\n"],["copy_device_to_device","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-copy_device_to_device","(*args)","<p>copy from source device to destination device\n<p>The four calls “g.copy_device_to_device”, “g.copy_device_to_file”, …\n"],["copy_device_to_file","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-copy_device_to_file","(*args)","<p>copy from source device to destination file\n<p>See “g.copy_device_to_device” for a general overview …\n"],["copy_file_to_device","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-copy_file_to_device","(*args)","<p>copy from source file to destination device\n<p>See “g.copy_device_to_device” for a general overview …\n"],["copy_file_to_file","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-copy_file_to_file","(*args)","<p>copy from source file to destination file\n<p>See “g.copy_device_to_device” for a general overview …\n"],["copy_in","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-copy_in","(p1, p2)","<p>copy local files or directories into an image\n<p>“g.copy_in” copies local files or directories …\n"],["copy_out","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-copy_out","(p1, p2)","<p>copy remote files or directories out of an image\n<p>“g.copy_out” copies remote files or directories …\n"],["copy_size","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-copy_size","(p1, p2, p3)","<p>copy size bytes from source to destination using dd\n<p>This command copies exactly “size” bytes …\n"],["cp","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-cp","(p1, p2)","<p>copy a file\n<p>This copies a file from “src” to “dest” where “dest” is either …\n"],["cp_a","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-cp_a","(p1, p2)","<p>copy a file or directory recursively\n<p>This copies a file or directory from “src” to “dest” …\n"],["cp_r","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-cp_r","(p1, p2)","<p>copy a file or directory recursively\n<p>This copies a file or directory from “src” to “dest” …\n"],["cpio_out","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-cpio_out","(*args)","<p>pack directory into cpio file\n<p>This command packs the contents of directory and downloads it to local file\n…\n"],["create","Guestfs","Guestfs.html#method-c-create","(*args)","<p>For backwards compatibility.\n"],["dd","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-dd","(p1, p2)","<p>copy from source to destination using dd\n<p>This command copies from one source device or file “src” …\n"],["delete_event_callback","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-delete_event_callback","(p1)","<p>Call\n<code>guestfs_delete_event_callback[http://libguestfs.org/guestfs.3.html#guestfs_delete_event_callback]</code>\n…\n"],["device_index","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-device_index","(p1)","<p>convert device to index\n<p>This function takes a device name (eg. “/dev/sdb”) and returns the index …\n"],["df","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-df","()","<p>report file system disk space usage\n<p>This command runs the “df” command to report disk space …\n"],["df_h","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-df_h","()","<p>report file system disk space usage (human readable)\n<p>This command runs the “df -h” command to …\n"],["disk_create","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-disk_create","(*args)","<p>create a blank disk image\n<p>Create a blank disk image called filename (a host file) with format\n“format” …\n"],["disk_format","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-disk_format","(p1)","<p>detect the disk format of a disk image\n<p>Detect and return the format of the disk image called filename. …\n"],["disk_has_backing_file","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-disk_has_backing_file","(p1)","<p>return whether disk has a backing file\n<p>Detect and return whether the disk image filename has a backing …\n"],["disk_virtual_size","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-disk_virtual_size","(p1)","<p>return virtual size of a disk\n<p>Detect and return the virtual size in bytes of the disk image called\nfilename. …\n"],["dmesg","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-dmesg","()","<p>return kernel messages\n<p>This returns the kernel messages (“dmesg” output) from the guest kernel. …\n"],["download","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-download","(p1, p2)","<p>download a file to the local machine\n<p>Download file remotefilename and save it as filename on the local …\n"],["download_offset","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-download_offset","(p1, p2, p3, p4)","<p>download a file to the local machine with offset and size\n<p>Download file remotefilename and save it as …\n"],["drop_caches","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-drop_caches","(p1)","<p>drop kernel page cache, dentries and inodes\n<p>This instructs the guest kernel to drop its page cache, and/or …\n"],["du","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-du","(p1)","<p>estimate file space usage\n<p>This command runs the “du -s” command to estimate file space usage …\n"],["e2fsck","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-e2fsck","(*args)","<p>check an ext2/ext3 filesystem\n<p>This runs the ext2/ext3 filesystem checker on “device”. It can …\n"],["e2fsck_f","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-e2fsck_f","(p1)","<p>check an ext2/ext3 filesystem\n<p>This runs “e2fsck -p -f device”, ie. runs the ext2/ext3 filesystem …\n"],["echo_daemon","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-echo_daemon","(p1)","<p>echo arguments back to the client\n<p>This command concatenates the list of “words” passed with …\n"],["egrep","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-egrep","(p1, p2)","<p>return lines matching a pattern\n<p>This calls the external “egrep” program and returns the matching …\n"],["egrepi","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-egrepi","(p1, p2)","<p>return lines matching a pattern\n<p>This calls the external “egrep -i” program and returns the matching …\n"],["equal","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-equal","(p1, p2)","<p>test if two files have equal contents\n<p>This compares the two files file1 and file2 and returns true if …\n"],["event_to_string","Guestfs","Guestfs.html#method-c-event_to_string","(p1)","<p>Call\n<code>guestfs_event_to_string[http://libguestfs.org/guestfs.3.html#guestfs_event_to_string]</code>\nto convert …\n"],["exists","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-exists","(p1)","<p>test if file or directory exists\n<p>This returns “true” if and only if there is a file, directory …\n"],["extlinux","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-extlinux","(p1)","<p>install the SYSLINUX bootloader on an ext2/3/4 or btrfs filesystem\n<p>Install the SYSLINUX bootloader on …\n"],["fallocate","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-fallocate","(p1, p2)","<p>preallocate a file in the guest filesystem\n<p>This command preallocates a file (containing zero bytes) named …\n"],["fallocate64","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-fallocate64","(p1, p2)","<p>preallocate a file in the guest filesystem\n<p>This command preallocates a file (containing zero bytes) named …\n"],["feature_available","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-feature_available","(p1)","<p>test availability of some parts of the API\n<p>This is the same as “g.available”, but unlike that …\n"],["fgrep","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-fgrep","(p1, p2)","<p>return lines matching a pattern\n<p>This calls the external “fgrep” program and returns the matching …\n"],["fgrepi","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-fgrepi","(p1, p2)","<p>return lines matching a pattern\n<p>This calls the external “fgrep -i” program and returns the matching …\n"],["file","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-file","(p1)","<p>determine file type\n<p>This call uses the standard file(1) command to determine the type or\ncontents of the …\n"],["file_architecture","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-file_architecture","(p1)","<p>detect the architecture of a binary file\n<p>This detects the architecture of the binary filename, and returns …\n"],["filesize","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-filesize","(p1)","<p>return the size of the file in bytes\n<p>This command returns the size of file in bytes.\n<p>To get other stats …\n"],["filesystem_available","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-filesystem_available","(p1)","<p>check if filesystem is available\n<p>Check whether libguestfs supports the named filesystem. The argument …\n"],["fill","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-fill","(p1, p2, p3)","<p>fill a file with octets\n<p>This command creates a new file called “path”. The initial content of …\n"],["fill_dir","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-fill_dir","(p1, p2)","<p>fill a directory with empty files\n<p>This function, useful for testing filesystems, creates “nr” …\n"],["fill_pattern","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-fill_pattern","(p1, p2, p3)","<p>fill a file with a repeating pattern of bytes\n<p>This function is like “g.fill” except that it …\n"],["find","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-find","(p1)","<p>find all files and directories\n<p>This command lists out all files and directories, recursively, starting …\n"],["find0","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-find0","(p1, p2)","<p>find all files and directories, returning NUL-separated list\n<p>This command lists out all files and directories, …\n"],["findfs_label","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-findfs_label","(p1)","<p>find a filesystem by label\n<p>This command searches the filesystems and returns the one which has the\ngiven …\n"],["findfs_uuid","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-findfs_uuid","(p1)","<p>find a filesystem by UUID\n<p>This command searches the filesystems and returns the one which has the\ngiven …\n"],["fsck","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-fsck","(p1, p2)","<p>run the filesystem checker\n<p>This runs the filesystem checker (fsck) on “device” which should …\n"],["fstrim","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-fstrim","(*args)","<p>trim free space in a filesystem\n<p>Trim the free space in the filesystem mounted on “mountpoint”. …\n"],["get_append","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_append","()","<p>get the additional kernel options\n<p>Return the additional kernel options which are added to the libguestfs …\n"],["get_attach_method","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_attach_method","()","<p>get the backend\n<p>Return the current backend.\n<p>See “g.set_backend” and “BACKEND” in guestfs(3). …\n"],["get_autosync","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_autosync","()","<p>get autosync mode\n<p>Get the autosync flag.\n<p>(For the C API documentation for this function, see\n<code>guestfs_get_autosync[http://libguestfs.org/guestfs.3.html#guestfs_get_autosync]</code>\n…\n"],["get_backend","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_backend","()","<p>get the backend\n<p>Return the current backend.\n<p>This handle property was previously called the “attach …\n"],["get_backend_setting","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_backend_setting","(p1)","<p>get a single per-backend settings string\n<p>Find a backend setting string which is either “name” …\n"],["get_backend_settings","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_backend_settings","()","<p>get per-backend settings\n<p>Return the current backend settings.\n<p>This call returns all backend settings strings. …\n"],["get_cachedir","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_cachedir","()","<p>get the appliance cache directory\n<p>Get the directory used by the handle to store the appliance cache.\n<p>(For …\n"],["get_direct","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_direct","()","<p>get direct appliance mode flag\n<p>Return the direct appliance mode flag.\n<p>(For the C API documentation for …\n"],["get_e2attrs","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_e2attrs","(p1)","<p>get ext2 file attributes of a file\n<p>This returns the file attributes associated with file.\n<p>The attributes …\n"],["get_e2generation","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_e2generation","(p1)","<p>get ext2 file generation of a file\n<p>This returns the ext2 file generation of a file. The generation (which …\n"],["get_e2label","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_e2label","(p1)","<p>get the ext2/3/4 filesystem label\n<p>This returns the ext2/3/4 filesystem label of the filesystem on “device”. …\n"],["get_e2uuid","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_e2uuid","(p1)","<p>get the ext2/3/4 filesystem UUID\n<p>This returns the ext2/3/4 filesystem UUID of the filesystem on “device”. …\n"],["get_hv","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_hv","()","<p>get the hypervisor binary\n<p>Return the current hypervisor binary.\n<p>This is always non-NULL. If it wasn’t set …\n"],["get_libvirt_requested_credential_challenge","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_libvirt_requested_credential_challenge","(p1)","<p>challenge of i’th requested credential\n<p>Get the challenge (provided by libvirt) for the “index”‘th …\n"],["get_libvirt_requested_credential_defresult","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_libvirt_requested_credential_defresult","(p1)","<p>default result of i’th requested credential\n<p>Get the default result (provided by libvirt) for the “index”‘th …\n"],["get_libvirt_requested_credential_prompt","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_libvirt_requested_credential_prompt","(p1)","<p>prompt of i’th requested credential\n<p>Get the prompt (provided by libvirt) for the “index”‘th …\n"],["get_libvirt_requested_credentials","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_libvirt_requested_credentials","()","<p>get list of credentials requested by libvirt\n<p>This should only be called during the event callback for …\n"],["get_memsize","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_memsize","()","<p>get memory allocated to the hypervisor\n<p>This gets the memory size in megabytes allocated to the hypervisor. …\n"],["get_network","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_network","()","<p>get enable network flag\n<p>This returns the enable network flag.\n<p>(For the C API documentation for this function, …\n"],["get_path","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_path","()","<p>get the search path\n<p>Return the current search path.\n<p>This is always non-NULL. If it wasn’t set already, …\n"],["get_pgroup","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_pgroup","()","<p>get process group flag\n<p>This returns the process group flag.\n<p>(For the C API documentation for this function, …\n"],["get_pid","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_pid","()","<p>get PID of hypervisor\n<p>Return the process ID of the hypervisor. If there is no hypervisor running,\nthen …\n"],["get_program","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_program","()","<p>get the program name\n<p>Get the program name. See “g.set_program”.\n<p>(For the C API documentation …\n"],["get_qemu","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_qemu","()","<p>get the hypervisor binary (usually qemu)\n<p>Return the current hypervisor binary (usually qemu).\n<p>This is always …\n"],["get_recovery_proc","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_recovery_proc","()","<p>get recovery process enabled flag\n<p>Return the recovery process enabled flag.\n<p>(For the C API documentation …\n"],["get_selinux","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_selinux","()","<p>get SELinux enabled flag\n<p>This returns the current setting of the selinux flag which is passed to the\nappliance …\n"],["get_smp","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_smp","()","<p>get number of virtual CPUs in appliance\n<p>This returns the number of virtual CPUs assigned to the appliance. …\n"],["get_state","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_state","()","<p>get the current state\n<p>This returns the current state as an opaque integer. This is only useful\nfor printing …\n"],["get_tmpdir","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_tmpdir","()","<p>get the temporary directory\n<p>Get the directory used by the handle to store temporary files.\n<p>(For the C  …\n"],["get_trace","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_trace","()","<p>get command trace enabled flag\n<p>Return the command trace flag.\n<p>(For the C API documentation for this function, …\n"],["get_umask","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_umask","()","<p>get the current umask\n<p>Return the current umask. By default the umask is 022 unless it has been\nset by …\n"],["get_verbose","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-get_verbose","()","<p>get verbose mode\n<p>This returns the verbose messages flag.\n<p>(For the C API documentation for this function, …\n"],["getcon","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-getcon","()","<p>get SELinux security context\n<p>This gets the SELinux security context of the daemon.\n<p>See the documentation …\n"],["getxattr","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-getxattr","(p1, p2)","<p>get a single extended attribute\n<p>Get a single extended attribute from file “path” named “name”. …\n"],["getxattrs","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-getxattrs","(p1)","<p>list extended attributes of a file or directory\n<p>This call lists the extended attributes of the file or …\n"],["glob_expand","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-glob_expand","(p1)","<p>expand a wildcard path\n<p>This command searches for all the pathnames matching “pattern” according …\n"],["grep","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-grep","(*args)","<p>return lines matching a pattern\n<p>This calls the external “grep” program and returns the matching …\n"],["grep_opts","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-grep_opts","(*args)","<p>return lines matching a pattern\n<p>This calls the external “grep” program and returns the matching …\n"],["grepi","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-grepi","(p1, p2)","<p>return lines matching a pattern\n<p>This calls the external “grep -i” program and returns the matching …\n"],["grub_install","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-grub_install","(p1, p2)","<p>install GRUB 1\n<p>This command installs GRUB 1 (the Grand Unified Bootloader) on “device”,\nwith …\n"],["head","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-head","(p1)","<p>return first 10 lines of a file\n<p>This command returns up to the first 10 lines of a file as a list of\nstrings. …\n"],["head_n","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-head_n","(p1, p2)","<p>return first N lines of a file\n<p>If the parameter “nrlines” is a positive number, this returns …\n"],["hexdump","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-hexdump","(p1)","<p>dump a file in hexadecimal\n<p>This runs “hexdump -C” on the given “path”. The result …\n"],["hivex_close","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-hivex_close","()","<p>close the current hivex handle\n<p>Close the current hivex handle.\n<p>This is a wrapper around the hivex(3) call …\n"],["hivex_commit","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-hivex_commit","(p1)","<p>commit (write) changes back to the hive\n<p>Commit (write) changes to the hive.\n<p>If the optional filename parameter …\n"],["hivex_node_add_child","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-hivex_node_add_child","(p1, p2)","<p>add a child node\n<p>Add a child node to “parent” named “name”.\n<p>This is a wrapper around …\n"],["hivex_node_children","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-hivex_node_children","(p1)","<p>return list of nodes which are subkeys of node\n<p>Return the list of nodes which are subkeys of “nodeh”. …\n"],["hivex_node_delete_child","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-hivex_node_delete_child","(p1)","<p>delete a node (recursively)\n<p>Delete “nodeh”, recursively if necessary.\n<p>This is a wrapper around …\n"],["hivex_node_get_child","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-hivex_node_get_child","(p1, p2)","<p>return the named child of node\n<p>Return the child of “nodeh” with the name “name”, if …\n"],["hivex_node_get_value","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-hivex_node_get_value","(p1, p2)","<p>return the named value\n<p>Return the value attached to “nodeh” which has the name “key”, …\n"],["hivex_node_name","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-hivex_node_name","(p1)","<p>return the name of the node\n<p>Return the name of “nodeh”.\n<p>This is a wrapper around the hivex(3) …\n"],["hivex_node_parent","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-hivex_node_parent","(p1)","<p>return the parent of node\n<p>Return the parent node of “nodeh”.\n<p>This is a wrapper around the hivex(3) …\n"],["hivex_node_set_value","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-hivex_node_set_value","(p1, p2, p3, p4)","<p>set or replace a single value in a node\n<p>Set or replace a single value under the node “nodeh”. …\n"],["hivex_node_values","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-hivex_node_values","(p1)","<p>return list of values attached to node\n<p>Return the array of (key, datatype, data) tuples attached to “nodeh”. …\n"],["hivex_open","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-hivex_open","(*args)","<p>open a Windows Registry hive file\n<p>Open the Windows Registry hive file named filename. If there was any …\n"],["hivex_root","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-hivex_root","()","<p>return the root node of the hive\n<p>Return the root node of the hive.\n<p>This is a wrapper around the hivex(3) …\n"],["hivex_value_key","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-hivex_value_key","(p1)","<p>return the key field from the (key, datatype, data) tuple\n<p>Return the key (name) field of a (key, datatype, …\n"],["hivex_value_type","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-hivex_value_type","(p1)","<p>return the data type from the (key, datatype, data) tuple\n<p>Return the data type field from a (key, datatype, …\n"],["hivex_value_utf8","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-hivex_value_utf8","(p1)","<p>return the data field from the (key, datatype, data) tuple\n<p>This calls “g.hivex_value_value” …\n"],["hivex_value_value","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-hivex_value_value","(p1)","<p>return the data field from the (key, datatype, data) tuple\n<p>Return the data field of a (key, datatype, …\n"],["initrd_cat","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-initrd_cat","(p1, p2)","<p>list the contents of a single file in an initrd\n<p>This command unpacks the file filename from the initrd …\n"],["initrd_list","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-initrd_list","(p1)","<p>list files in an initrd\n<p>This command lists out files contained in an initrd.\n<p>The files are listed without …\n"],["inotify_add_watch","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inotify_add_watch","(p1, p2)","<p>add an inotify watch\n<p>Watch “path” for the events listed in “mask”.\n<p>Note that if “path” …\n"],["inotify_close","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inotify_close","()","<p>close the inotify handle\n<p>This closes the inotify handle which was previously opened by inotify_init.\n…\n"],["inotify_files","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inotify_files","()","<p>return list of watched files that had events\n<p>This function is a helpful wrapper around “g.inotify_read” …\n"],["inotify_init","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inotify_init","(p1)","<p>create an inotify handle\n<p>This command creates a new inotify handle. The inotify subsystem can be\nused …\n"],["inotify_read","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inotify_read","()","<p>return list of inotify events\n<p>Return the complete queue of events that have happened since the previous …\n"],["inotify_rm_watch","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inotify_rm_watch","(p1)","<p>remove an inotify watch\n<p>Remove a previously defined inotify watch. See “g.inotify_add_watch”. …\n"],["inspect_get_arch","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_get_arch","(p1)","<p>get architecture of inspected operating system\n<p>This returns the architecture of the inspected operating …\n"],["inspect_get_distro","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_get_distro","(p1)","<p>get distro of inspected operating system\n<p>This returns the distro (distribution) of the inspected operating …\n"],["inspect_get_drive_mappings","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_get_drive_mappings","(p1)","<p>get drive letter mappings\n<p>This call is useful for Windows which uses a primitive system of assigning\ndrive …\n"],["inspect_get_filesystems","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_get_filesystems","(p1)","<p>get filesystems associated with inspected operating system\n<p>This returns a list of all the filesystems …\n"],["inspect_get_format","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_get_format","(p1)","<p>get format of inspected operating system\n<p>This returns the format of the inspected operating system. You …\n"],["inspect_get_hostname","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_get_hostname","(p1)","<p>get hostname of the operating system\n<p>This function returns the hostname of the operating system as found …\n"],["inspect_get_icon","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_get_icon","(*args)","<p>get the icon corresponding to this operating system\n<p>This function returns an icon corresponding to the …\n"],["inspect_get_major_version","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_get_major_version","(p1)","<p>get major version of inspected operating system\n<p>This returns the major version number of the inspected …\n"],["inspect_get_minor_version","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_get_minor_version","(p1)","<p>get minor version of inspected operating system\n<p>This returns the minor version number of the inspected …\n"],["inspect_get_mountpoints","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_get_mountpoints","(p1)","<p>get mountpoints of inspected operating system\n<p>This returns a hash of where we think the filesystems associated …\n"],["inspect_get_package_format","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_get_package_format","(p1)","<p>get package format used by the operating system\n<p>This function and “g.inspect_get_package_management” …\n"],["inspect_get_package_management","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_get_package_management","(p1)","<p>get package management tool used by the operating system\n<p>“g.inspect_get_package_format” and …\n"],["inspect_get_product_name","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_get_product_name","(p1)","<p>get product name of inspected operating system\n<p>This returns the product name of the inspected operating …\n"],["inspect_get_product_variant","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_get_product_variant","(p1)","<p>get product variant of inspected operating system\n<p>This returns the product variant of the inspected operating …\n"],["inspect_get_roots","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_get_roots","()","<p>return list of operating systems found by last inspection\n<p>This function is a convenient way to get the …\n"],["inspect_get_type","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_get_type","(p1)","<p>get type of inspected operating system\n<p>This returns the type of the inspected operating system. Currently …\n"],["inspect_get_windows_current_control_set","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_get_windows_current_control_set","(p1)","<p>get Windows CurrentControlSet of inspected operating system\n<p>This returns the Windows CurrentControlSet …\n"],["inspect_get_windows_systemroot","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_get_windows_systemroot","(p1)","<p>get Windows systemroot of inspected operating system\n<p>This returns the Windows systemroot of the inspected …\n"],["inspect_is_live","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_is_live","(p1)","<p>get live flag for install disk\n<p>If “g.inspect_get_format” returns “installer” (this …\n"],["inspect_is_multipart","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_is_multipart","(p1)","<p>get multipart flag for install disk\n<p>If “g.inspect_get_format” returns “installer” …\n"],["inspect_is_netinst","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_is_netinst","(p1)","<p>get netinst (network installer) flag for install disk\n<p>If “g.inspect_get_format” returns “installer” …\n"],["inspect_list_applications","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_list_applications","(p1)","<p>get list of applications installed in the operating system\n<p>Return the list of applications installed in …\n"],["inspect_list_applications2","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_list_applications2","(p1)","<p>get list of applications installed in the operating system\n<p>Return the list of applications installed in …\n"],["inspect_os","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-inspect_os","()","<p>inspect disk and return list of operating systems found\n<p>This function uses other libguestfs functions …\n"],["is_blockdev","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_blockdev","(*args)","<p>test if block device\n<p>This returns “true” if and only if there is a block device with the given …\n"],["is_blockdev_opts","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_blockdev_opts","(*args)","<p>test if block device\n<p>This returns “true” if and only if there is a block device with the given …\n"],["is_busy","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_busy","()","<p>is busy processing a command\n<p>This always returns false. This function is deprecated with no replacement.\n…\n"],["is_chardev","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_chardev","(*args)","<p>test if character device\n<p>This returns “true” if and only if there is a character device with …\n"],["is_chardev_opts","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_chardev_opts","(*args)","<p>test if character device\n<p>This returns “true” if and only if there is a character device with …\n"],["is_config","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_config","()","<p>is in configuration state\n<p>This returns true iff this handle is being configured (in the “CONFIG” …\n"],["is_dir","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_dir","(*args)","<p>test if a directory\n<p>This returns “true” if and only if there is a directory with the given\n“path” …\n"],["is_dir_opts","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_dir_opts","(*args)","<p>test if a directory\n<p>This returns “true” if and only if there is a directory with the given\n“path” …\n"],["is_fifo","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_fifo","(*args)","<p>test if FIFO (named pipe)\n<p>This returns “true” if and only if there is a FIFO (named pipe) with …\n"],["is_fifo_opts","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_fifo_opts","(*args)","<p>test if FIFO (named pipe)\n<p>This returns “true” if and only if there is a FIFO (named pipe) with …\n"],["is_file","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_file","(*args)","<p>test if a regular file\n<p>This returns “true” if and only if there is a regular file with the given …\n"],["is_file_opts","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_file_opts","(*args)","<p>test if a regular file\n<p>This returns “true” if and only if there is a regular file with the given …\n"],["is_launching","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_launching","()","<p>is launching subprocess\n<p>This returns true iff this handle is launching the subprocess (in the\n“LAUNCHING” …\n"],["is_lv","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_lv","(p1)","<p>test if device is a logical volume\n<p>This command tests whether “device” is a logical volume, …\n"],["is_ready","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_ready","()","<p>is ready to accept commands\n<p>This returns true iff this handle is ready to accept commands (in the\n“READY” …\n"],["is_socket","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_socket","(*args)","<p>test if socket\n<p>This returns “true” if and only if there is a Unix domain socket with the\ngiven …\n"],["is_socket_opts","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_socket_opts","(*args)","<p>test if socket\n<p>This returns “true” if and only if there is a Unix domain socket with the\ngiven …\n"],["is_symlink","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_symlink","(p1)","<p>test if symbolic link\n<p>This returns “true” if and only if there is a symbolic link with the given\n…\n"],["is_whole_device","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_whole_device","(p1)","<p>test if a device is a whole device\n<p>This returns “true” if and only if “device” refers …\n"],["is_zero","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_zero","(p1)","<p>test if a file contains all zero bytes\n<p>This returns true iff the file exists and the file is empty or …\n"],["is_zero_device","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-is_zero_device","(p1)","<p>test if a device contains all zero bytes\n<p>This returns true iff the device exists and contains all zero …\n"],["isoinfo","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-isoinfo","(p1)","<p>get ISO information from primary volume descriptor of ISO file\n<p>This is the same as “g.isoinfo_device” …\n"],["isoinfo_device","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-isoinfo_device","(p1)","<p>get ISO information from primary volume descriptor of device\n<p>“device” is an ISO device. This …\n"],["journal_close","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-journal_close","()","<p>close the systemd journal\n<p>Close the journal handle.\n<p>(For the C API documentation for this function, see …\n"],["journal_get","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-journal_get","()","<p>read the current journal entry\n<p>Read the current journal entry. This returns all the fields in the journal\n…\n"],["journal_get_data_threshold","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-journal_get_data_threshold","()","<p>get the data threshold for reading journal entries\n<p>Get the current data threshold for reading journal …\n"],["journal_get_realtime_usec","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-journal_get_realtime_usec","()","<p>get the timestamp of the current journal entry\n<p>Get the realtime (wallclock) timestamp of the current journal …\n"],["journal_next","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-journal_next","()","<p>move to the next journal entry\n<p>Move to the next journal entry. You have to call this at least once after …\n"],["journal_open","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-journal_open","(p1)","<p>open the systemd journal\n<p>Open the systemd journal located in directory. Any previously opened\njournal …\n"],["journal_set_data_threshold","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-journal_set_data_threshold","(p1)","<p>set the data threshold for reading journal entries\n<p>Set the data threshold for reading journal entries. …\n"],["journal_skip","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-journal_skip","(p1)","<p>skip forwards or backwards in the journal\n<p>Skip forwards (“skip ≥ 0”) or backwards (“skip …\n"],["kill_subprocess","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-kill_subprocess","()","<p>kill the hypervisor\n<p>This kills the hypervisor.\n<p>Do not call this. See: “g.shutdown” instead.\n"],["launch","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-launch","()","<p>launch the backend\n<p>You should call this after configuring the handle (eg. adding drives) but\nbefore performing …\n"],["lchown","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lchown","(p1, p2, p3)","<p>change file owner and group\n<p>Change the file owner to “owner” and group to “group”. …\n"],["ldmtool_create_all","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ldmtool_create_all","()","<p>scan and create Windows dynamic disk volumes\n<p>This function scans all block devices looking for Windows …\n"],["ldmtool_diskgroup_disks","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ldmtool_diskgroup_disks","(p1)","<p>return the disks in a Windows dynamic disk group\n<p>Return the disks in a Windows dynamic disk group. The …\n"],["ldmtool_diskgroup_name","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ldmtool_diskgroup_name","(p1)","<p>return the name of a Windows dynamic disk group\n<p>Return the name of a Windows dynamic disk group. The “diskgroup” …\n"],["ldmtool_diskgroup_volumes","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ldmtool_diskgroup_volumes","(p1)","<p>return the volumes in a Windows dynamic disk group\n<p>Return the volumes in a Windows dynamic disk group. …\n"],["ldmtool_remove_all","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ldmtool_remove_all","()","<p>remove all Windows dynamic disk volumes\n<p>This is essentially the opposite of “g.ldmtool_create_all”. …\n"],["ldmtool_scan","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ldmtool_scan","()","<p>scan for Windows dynamic disks\n<p>This function scans for Windows dynamic disks. It returns a list of\nidentifiers …\n"],["ldmtool_scan_devices","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ldmtool_scan_devices","(p1)","<p>scan for Windows dynamic disks\n<p>This function scans for Windows dynamic disks. It returns a list of\nidentifiers …\n"],["ldmtool_volume_hint","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ldmtool_volume_hint","(p1, p2)","<p>return the hint field of a Windows dynamic disk volume\n<p>Return the hint field of the volume named “volume” …\n"],["ldmtool_volume_partitions","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ldmtool_volume_partitions","(p1, p2)","<p>return the partitions in a Windows dynamic disk volume\n<p>Return the list of partitions in the volume named …\n"],["ldmtool_volume_type","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ldmtool_volume_type","(p1, p2)","<p>return the type of a Windows dynamic disk volume\n<p>Return the type of the volume named “volume” …\n"],["lgetxattr","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lgetxattr","(p1, p2)","<p>get a single extended attribute\n<p>Get a single extended attribute from file “path” named “name”. …\n"],["lgetxattrs","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lgetxattrs","(p1)","<p>list extended attributes of a file or directory\n<p>This is the same as “g.getxattrs”, but if “path” …\n"],["list_9p","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-list_9p","()","<p>list 9p filesystems\n<p>List all 9p filesystems attached to the guest. A list of mount tags is\nreturned.\n<p>(For …\n"],["list_devices","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-list_devices","()","<p>list the block devices\n<p>List all the block devices.\n<p>The full block device names are returned, eg. /dev/sda. …\n"],["list_disk_labels","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-list_disk_labels","()","<p>mapping of disk labels to devices\n<p>If you add drives using the optional “label” parameter of …\n"],["list_dm_devices","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-list_dm_devices","()","<p>list device mapper devices\n<p>List all device mapper devices.\n<p>The returned list contains /dev/mapper/ * devices, …\n"],["list_filesystems","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-list_filesystems","()","<p>list filesystems\n<p>This inspection command looks for filesystems on partitions, block devices\nand logical …\n"],["list_ldm_partitions","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-list_ldm_partitions","()","<p>list all Windows dynamic disk partitions\n<p>This function returns all Windows dynamic disk partitions that …\n"],["list_ldm_volumes","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-list_ldm_volumes","()","<p>list all Windows dynamic disk volumes\n<p>This function returns all Windows dynamic disk volumes that were …\n"],["list_md_devices","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-list_md_devices","()","<p>list Linux md (RAID) devices\n<p>List all Linux md devices.\n<p>(For the C API documentation for this function, …\n"],["list_partitions","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-list_partitions","()","<p>list the partitions\n<p>List all the partitions detected on all block devices.\n<p>The full partition device names …\n"],["ll","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ll","(p1)","<p>list the files in a directory (long format)\n<p>List the files in directory (relative to the root directory, …\n"],["llz","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-llz","(p1)","<p>list the files in a directory (long format with SELinux contexts)\n<p>List the files in directory in the format …\n"],["ln","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ln","(p1, p2)","<p>create a hard link\n<p>This command creates a hard link using the “ln” command.\n<p>(For the C API documentation …\n"],["ln_f","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ln_f","(p1, p2)","<p>create a hard link\n<p>This command creates a hard link using the “ln -f” command. The\n<strong>-f</strong> option …\n"],["ln_s","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ln_s","(p1, p2)","<p>create a symbolic link\n<p>This command creates a symbolic link using the “ln -s” command.\n<p>(For the …\n"],["ln_sf","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ln_sf","(p1, p2)","<p>create a symbolic link\n<p>This command creates a symbolic link using the “ln -sf” command, The …\n"],["lremovexattr","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lremovexattr","(p1, p2)","<p>remove extended attribute of a file or directory\n<p>This is the same as “g.removexattr”, but if …\n"],["ls","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ls","(p1)","<p>list the files in a directory\n<p>List the files in directory (relative to the root directory, there is no …\n"],["ls0","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ls0","(p1, p2)","<p>get list of files in a directory\n<p>This specialized command is used to get a listing of the filenames in …\n"],["lsetxattr","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lsetxattr","(p1, p2, p3, p4)","<p>set extended attribute of a file or directory\n<p>This is the same as “g.setxattr”, but if “path” …\n"],["lstat","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lstat","(p1)","<p>get file information for a symbolic link\n<p>Returns file information for the given “path”.\n<p>This …\n"],["lstatlist","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lstatlist","(p1, p2)","<p>lstat on multiple files\n<p>This call allows you to perform the “g.lstat” operation on multiple …\n"],["lstatns","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lstatns","(p1)","<p>get file information for a symbolic link\n<p>Returns file information for the given “path”.\n<p>This …\n"],["lstatnslist","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lstatnslist","(p1, p2)","<p>lstat on multiple files\n<p>This call allows you to perform the “g.lstatns” operation on multiple …\n"],["luks_add_key","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-luks_add_key","(p1, p2, p3, p4)","<p>add a key on a LUKS encrypted device\n<p>This command adds a new key on LUKS device “device”. “key” …\n"],["luks_close","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-luks_close","(p1)","<p>close a LUKS device\n<p>This closes a LUKS device that was created earlier by “g.luks_open” or\n“g.luks_open_ro”. …\n"],["luks_format","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-luks_format","(p1, p2, p3)","<p>format a block device as a LUKS encrypted device\n<p>This command erases existing data on “device” …\n"],["luks_format_cipher","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-luks_format_cipher","(p1, p2, p3, p4)","<p>format a block device as a LUKS encrypted device\n<p>This command is the same as “g.luks_format” …\n"],["luks_kill_slot","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-luks_kill_slot","(p1, p2, p3)","<p>remove a key from a LUKS encrypted device\n<p>This command deletes the key in key slot “keyslot” …\n"],["luks_open","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-luks_open","(p1, p2, p3)","<p>open a LUKS-encrypted block device\n<p>This command opens a block device which has been encrypted according …\n"],["luks_open_ro","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-luks_open_ro","(p1, p2, p3)","<p>open a LUKS-encrypted block device read-only\n<p>This is the same as “g.luks_open” except that a …\n"],["lvcreate","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lvcreate","(p1, p2, p3)","<p>create an LVM logical volume\n<p>This creates an LVM logical volume called “logvol” on the volume …\n"],["lvcreate_free","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lvcreate_free","(p1, p2, p3)","<p>create an LVM logical volume in % remaining free space\n<p>Create an LVM logical volume called /dev/volgroup/logvol …\n"],["lvm_canonical_lv_name","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lvm_canonical_lv_name","(p1)","<p>get canonical name of an LV\n<p>This converts alternative naming schemes for LVs that you might find to the\n…\n"],["lvm_clear_filter","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lvm_clear_filter","()","<p>clear LVM device filter\n<p>This undoes the effect of “g.lvm_set_filter”. LVM will be able to see …\n"],["lvm_remove_all","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lvm_remove_all","()","<p>remove all LVM LVs, VGs and PVs\n<p>This command removes all LVM logical volumes, volume groups and physical …\n"],["lvm_set_filter","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lvm_set_filter","(p1)","<p>set LVM device filter\n<p>This sets the LVM device filter so that LVM will only be able to “see” …\n"],["lvremove","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lvremove","(p1)","<p>remove an LVM logical volume\n<p>Remove an LVM logical volume “device”, where “device” …\n"],["lvrename","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lvrename","(p1, p2)","<p>rename an LVM logical volume\n<p>Rename a logical volume “logvol” with the new name “newlogvol”. …\n"],["lvresize","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lvresize","(p1, p2)","<p>resize an LVM logical volume\n<p>This resizes (expands or shrinks) an existing LVM logical volume to\n“mbytes”. …\n"],["lvresize_free","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lvresize_free","(p1, p2)","<p>expand an LV to fill free space\n<p>This expands an existing logical volume “lv” so that it fills …\n"],["lvs","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lvs","()","<p>list the LVM logical volumes (LVs)\n<p>List all the logical volumes detected. This is the equivalent of the …\n"],["lvs_full","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lvs_full","()","<p>list the LVM logical volumes (LVs)\n<p>List all the logical volumes detected. This is the equivalent of the …\n"],["lvuuid","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lvuuid","(p1)","<p>get the UUID of a logical volume\n<p>This command returns the UUID of the LVM LV “device”.\n<p>(For the …\n"],["lxattrlist","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-lxattrlist","(p1, p2)","<p>lgetxattr on multiple files\n<p>This call allows you to get the extended attributes of multiple files,\nwhere …\n"],["max_disks","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-max_disks","()","<p>maximum number of disks that may be added\n<p>Return the maximum number of disks that may be added to a handle …\n"],["md_create","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-md_create","(*args)","<p>create a Linux md (RAID) device\n<p>Create a Linux md (RAID) device named “name” on the devices …\n"],["md_detail","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-md_detail","(p1)","<p>obtain metadata for an MD device\n<p>This command exposes the output of ‘mdadm -DY &lt;md&gt;’. The following …\n"],["md_stat","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-md_stat","(p1)","<p>get underlying devices from an MD device\n<p>This call returns a list of the underlying devices which make …\n"],["md_stop","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-md_stop","(p1)","<p>stop a Linux md (RAID) device\n<p>This command deactivates the MD array named “md”. The device is …\n"],["mkdir","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mkdir","(p1)","<p>create a directory\n<p>Create a directory named “path”.\n<p>(For the C API documentation for this function, …\n"],["mkdir_mode","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mkdir_mode","(p1, p2)","<p>create a directory with a particular mode\n<p>This command creates a directory, setting the initial permissions …\n"],["mkdir_p","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mkdir_p","(p1)","<p>create a directory and parents\n<p>Create a directory named “path”, creating any parent directories …\n"],["mkdtemp","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mkdtemp","(p1)","<p>create a temporary directory\n<p>This command creates a temporary directory. The “tmpl” parameter …\n"],["mke2fs","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mke2fs","(*args)","<p>create an ext2/ext3/ext4 filesystem on device\n<p>“mke2fs” is used to create an ext2, ext3, or ext4 …\n"],["mke2fs_J","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mke2fs_J","(p1, p2, p3, p4)","<p>make ext2/3/4 filesystem with external journal\n<p>This creates an ext2/3/4 filesystem on “device” …\n"],["mke2fs_JL","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mke2fs_JL","(p1, p2, p3, p4)","<p>make ext2/3/4 filesystem with external journal\n<p>This creates an ext2/3/4 filesystem on “device” …\n"],["mke2fs_JU","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mke2fs_JU","(p1, p2, p3, p4)","<p>make ext2/3/4 filesystem with external journal\n<p>This creates an ext2/3/4 filesystem on “device” …\n"],["mke2journal","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mke2journal","(p1, p2)","<p>make ext2/3/4 external journal\n<p>This creates an ext2 external journal on “device”. It is equivalent …\n"],["mke2journal_L","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mke2journal_L","(p1, p2, p3)","<p>make ext2/3/4 external journal with label\n<p>This creates an ext2 external journal on “device” …\n"],["mke2journal_U","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mke2journal_U","(p1, p2, p3)","<p>make ext2/3/4 external journal with UUID\n<p>This creates an ext2 external journal on “device” with …\n"],["mkfifo","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mkfifo","(p1, p2)","<p>make FIFO (named pipe)\n<p>This call creates a FIFO (named pipe) called “path” with mode “mode”. …\n"],["mkfs","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mkfs","(*args)","<p>make a filesystem\n<p>This function creates a filesystem on “device”. The filesystem type is\n“fstype”, …\n"],["mkfs_b","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mkfs_b","(p1, p2, p3)","<p>make a filesystem with block size\n<p>This call is similar to “g.mkfs”, but it allows you to control …\n"],["mkfs_btrfs","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mkfs_btrfs","(*args)","<p>create a btrfs filesystem\n<p>Create a btrfs filesystem, allowing all configurables to be set. For more\ninformation …\n"],["mkfs_opts","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mkfs_opts","(*args)","<p>make a filesystem\n<p>This function creates a filesystem on “device”. The filesystem type is\n“fstype”, …\n"],["mklost_and_found","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mklost_and_found","(p1)","<p>make lost+found directory on an ext2/3/4 filesystem\n<p>Make the “lost+found” directory, normally …\n"],["mkmountpoint","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mkmountpoint","(p1)","<p>create a mountpoint\n<p>“g.mkmountpoint” and “g.rmmountpoint” are specialized calls that …\n"],["mknod","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mknod","(p1, p2, p3, p4)","<p>make block, character or FIFO devices\n<p>This call creates block or character special devices, or named pipes …\n"],["mknod_b","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mknod_b","(p1, p2, p3, p4)","<p>make block device node\n<p>This call creates a block device node called “path” with mode “mode” …\n"],["mknod_c","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mknod_c","(p1, p2, p3, p4)","<p>make char device node\n<p>This call creates a char device node called “path” with mode “mode” …\n"],["mkswap","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mkswap","(*args)","<p>create a swap partition\n<p>Create a Linux swap partition on “device”.\n<p>The option arguments “label” …\n"],["mkswap_L","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mkswap_L","(p1, p2)","<p>create a swap partition with a label\n<p>Create a swap partition on “device” with label “label”. …\n"],["mkswap_U","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mkswap_U","(p1, p2)","<p>create a swap partition with an explicit UUID\n<p>Create a swap partition on “device” with UUID …\n"],["mkswap_file","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mkswap_file","(p1)","<p>create a swap file\n<p>Create a swap file.\n<p>This command just writes a swap file signature to an existing file. …\n"],["mkswap_opts","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mkswap_opts","(*args)","<p>create a swap partition\n<p>Create a Linux swap partition on “device”.\n<p>The option arguments “label” …\n"],["mktemp","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mktemp","(*args)","<p>create a temporary file\n<p>This command creates a temporary file. The “tmpl” parameter should be …\n"],["modprobe","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-modprobe","(p1)","<p>load a kernel module\n<p>This loads a kernel module in the appliance.\n<p>(For the C API documentation for this …\n"],["mount","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mount","(p1, p2)","<p>mount a guest disk at a position in the filesystem\n<p>Mount a guest disk at a position in the filesystem. …\n"],["mount_9p","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mount_9p","(*args)","<p>mount 9p filesystem\n<p>Mount the virtio-9p filesystem with the tag “mounttag” on the directory …\n"],["mount_local","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mount_local","(*args)","<p>mount on the local filesystem\n<p>This call exports the libguestfs-accessible filesystem to a local\nmountpoint …\n"],["mount_local_run","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mount_local_run","()","<p>run main loop of mount on the local filesystem\n<p>Run the main loop which translates kernel calls to libguestfs …\n"],["mount_loop","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mount_loop","(p1, p2)","<p>mount a file using the loop device\n<p>This command lets you mount file (a filesystem image in a file) on …\n"],["mount_options","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mount_options","(p1, p2, p3)","<p>mount a guest disk with mount options\n<p>This is the same as the “g.mount” command, but it allows …\n"],["mount_ro","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mount_ro","(p1, p2)","<p>mount a guest disk, read-only\n<p>This is the same as the “g.mount” command, but it mounts the filesystem …\n"],["mount_vfs","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mount_vfs","(p1, p2, p3, p4)","<p>mount a guest disk with mount options and vfstype\n<p>This is the same as the “g.mount” command, …\n"],["mountpoints","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mountpoints","()","<p>show mountpoints\n<p>This call is similar to “g.mounts”. That call returns a list of devices.\nThis …\n"],["mounts","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mounts","()","<p>show mounted filesystems\n<p>This returns the list of currently mounted filesystems. It returns the list\nof …\n"],["mv","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-mv","(p1, p2)","<p>move a file\n<p>This moves a file from “src” to “dest” where “dest” is either …\n"],["new","Guestfs::Guestfs","Guestfs/Guestfs.html#method-c-new","(*args)","<p>Call\n<code>guestfs_create_flags[http://libguestfs.org/guestfs.3.html#guestfs_create_flags]</code>\nto create a new …\n"],["nr_devices","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-nr_devices","()","<p>return number of whole block devices (disks) added\n<p>This returns the number of whole block devices that …\n"],["ntfs_3g_probe","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ntfs_3g_probe","(p1, p2)","<p>probe NTFS volume\n<p>This command runs the ntfs-3g.probe(8) command which probes an NTFS\n“device” …\n"],["ntfsclone_in","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ntfsclone_in","(p1, p2)","<p>restore NTFS from backup file\n<p>Restore the “backupfile” (from a previous call to “g.ntfsclone_out”) …\n"],["ntfsclone_out","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ntfsclone_out","(*args)","<p>save NTFS to backup file\n<p>Stream the NTFS filesystem “device” to the local file “backupfile”. …\n"],["ntfsfix","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ntfsfix","(*args)","<p>fix common errors and force Windows to check NTFS\n<p>This command repairs some fundamental NTFS inconsistencies, …\n"],["ntfsresize","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ntfsresize","(*args)","<p>resize an NTFS filesystem\n<p>This command resizes an NTFS filesystem, expanding or shrinking it to the\nsize …\n"],["ntfsresize_opts","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ntfsresize_opts","(*args)","<p>resize an NTFS filesystem\n<p>This command resizes an NTFS filesystem, expanding or shrinking it to the\nsize …\n"],["ntfsresize_size","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ntfsresize_size","(p1, p2)","<p>resize an NTFS filesystem (with size)\n<p>This command is the same as “g.ntfsresize” except that …\n"],["parse_environment","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-parse_environment","()","<p>parse the environment and set handle flags accordingly\n<p>Parse the program’s environment and set flags in …\n"],["parse_environment_list","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-parse_environment_list","(p1)","<p>parse the environment and set handle flags accordingly\n<p>Parse the list of strings in the argument “environment” …\n"],["part_add","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-part_add","(p1, p2, p3, p4)","<p>add a partition to the device\n<p>This command adds a partition to “device”. If there is no partition …\n"],["part_del","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-part_del","(p1, p2)","<p>delete a partition\n<p>This command deletes the partition numbered “partnum” on “device”. …\n"],["part_disk","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-part_disk","(p1, p2)","<p>partition whole disk with a single primary partition\n<p>This command is simply a combination of “g.part_init” …\n"],["part_get_bootable","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-part_get_bootable","(p1, p2)","<p>return true if a partition is bootable\n<p>This command returns true if the partition “partnum” …\n"],["part_get_gpt_guid","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-part_get_gpt_guid","(p1, p2)","<p>get the GUID of a GPT partition\n<p>Return the GUID of numbered GPT partition “partnum”.\n<p>(For the …\n"],["part_get_gpt_type","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-part_get_gpt_type","(p1, p2)","<p>get the type GUID of a GPT partition\n<p>Return the type GUID of numbered GPT partition “partnum”. …\n"],["part_get_mbr_id","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-part_get_mbr_id","(p1, p2)","<p>get the MBR type byte (ID byte) from a partition\n<p>Returns the MBR type byte (also known as the ID byte) …\n"],["part_get_mbr_part_type","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-part_get_mbr_part_type","(p1, p2)","<p>get the MBR partition type\n<p>This returns the partition type of an MBR partition numbered “partnum” …\n"],["part_get_name","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-part_get_name","(p1, p2)","<p>get partition name\n<p>This gets the partition name on partition numbered “partnum” on device\n“device”. …\n"],["part_get_parttype","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-part_get_parttype","(p1)","<p>get the partition table type\n<p>This command examines the partition table on “device” and returns …\n"],["part_init","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-part_init","(p1, p2)","<p>create an empty partition table\n<p>This creates an empty partition table on “device” of one of …\n"],["part_list","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-part_list","(p1)","<p>list partitions on a device\n<p>This command parses the partition table on “device” and returns …\n"],["part_set_bootable","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-part_set_bootable","(p1, p2, p3)","<p>make a partition bootable\n<p>This sets the bootable flag on partition numbered “partnum” on device …\n"],["part_set_gpt_guid","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-part_set_gpt_guid","(p1, p2, p3)","<p>set the GUID of a GPT partition\n<p>Set the GUID of numbered GPT partition “partnum” to “guid”. …\n"],["part_set_gpt_type","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-part_set_gpt_type","(p1, p2, p3)","<p>set the type GUID of a GPT partition\n<p>Set the type GUID of numbered GPT partition “partnum” to …\n"],["part_set_mbr_id","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-part_set_mbr_id","(p1, p2, p3)","<p>set the MBR type byte (ID byte) of a partition\n<p>Sets the MBR type byte (also known as the ID byte) of the …\n"],["part_set_name","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-part_set_name","(p1, p2, p3)","<p>set partition name\n<p>This sets the partition name on partition numbered “partnum” on device\n“device”. …\n"],["part_to_dev","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-part_to_dev","(p1)","<p>convert partition name to device name\n<p>This function takes a partition name (eg. “/dev/sdb1”) …\n"],["part_to_partnum","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-part_to_partnum","(p1)","<p>convert partition name to partition number\n<p>This function takes a partition name (eg. “/dev/sdb1”) …\n"],["ping_daemon","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-ping_daemon","()","<p>ping the guest daemon\n<p>This is a test probe into the guestfs daemon running inside the libguestfs\nappliance. …\n"],["pread","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-pread","(p1, p2, p3)","<p>read part of a file\n<p>This command lets you read part of a file. It reads “count” bytes of the …\n"],["pread_device","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-pread_device","(p1, p2, p3)","<p>read part of a device\n<p>This command lets you read part of a block device. It reads “count” bytes …\n"],["pvchange_uuid","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-pvchange_uuid","(p1)","<p>generate a new random UUID for a physical volume\n<p>Generate a new random UUID for the physical volume “device”. …\n"],["pvchange_uuid_all","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-pvchange_uuid_all","()","<p>generate new random UUIDs for all physical volumes\n<p>Generate new random UUIDs for all physical volumes. …\n"],["pvcreate","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-pvcreate","(p1)","<p>create an LVM physical volume\n<p>This creates an LVM physical volume on the named “device”, where …\n"],["pvremove","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-pvremove","(p1)","<p>remove an LVM physical volume\n<p>This wipes a physical volume “device” so that LVM will no longer …\n"],["pvresize","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-pvresize","(p1)","<p>resize an LVM physical volume\n<p>This resizes (expands or shrinks) an existing LVM physical volume to match\n…\n"],["pvresize_size","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-pvresize_size","(p1, p2)","<p>resize an LVM physical volume (with size)\n<p>This command is the same as “g.pvresize” except that …\n"],["pvs","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-pvs","()","<p>list the LVM physical volumes (PVs)\n<p>List all the physical volumes detected. This is the equivalent of …\n"],["pvs_full","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-pvs_full","()","<p>list the LVM physical volumes (PVs)\n<p>List all the physical volumes detected. This is the equivalent of …\n"],["pvuuid","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-pvuuid","(p1)","<p>get the UUID of a physical volume\n<p>This command returns the UUID of the LVM PV “device”.\n<p>(For …\n"],["pwrite","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-pwrite","(p1, p2, p3)","<p>write to part of a file\n<p>This command writes to part of a file. It writes the data buffer “content”\n…\n"],["pwrite_device","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-pwrite_device","(p1, p2, p3)","<p>write to part of a device\n<p>This command writes to part of a device. It writes the data buffer\n“content” …\n"],["read_file","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-read_file","(p1)","<p>read a file\n<p>This calls returns the contents of the file “path” as a buffer.\n<p>Unlike “g.cat”, …\n"],["read_lines","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-read_lines","(p1)","<p>read file as lines\n<p>Return the contents of the file named “path”.\n<p>The file contents are returned …\n"],["readdir","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-readdir","(p1)","<p>read directories entries\n<p>This returns the list of directory entries in directory “dir”.\n<p>All entries …\n"],["readlink","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-readlink","(p1)","<p>read the target of a symbolic link\n<p>This command reads the target of a symbolic link.\n<p>(For the C API documentation …\n"],["readlinklist","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-readlinklist","(p1, p2)","<p>readlink on multiple files\n<p>This call allows you to do a “readlink” operation on multiple files, …\n"],["realpath","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-realpath","(p1)","<p>canonicalized absolute pathname\n<p>Return the canonicalized absolute pathname of “path”. The returned …\n"],["remount","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-remount","(*args)","<p>remount a filesystem with different options\n<p>This call allows you to change the “rw” (readonly/read-write) …\n"],["remove_drive","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-remove_drive","(p1)","<p>remove a disk image\n<p>This function is conceptually the opposite of “g.add_drive_opts”. It\nremoves …\n"],["removexattr","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-removexattr","(p1, p2)","<p>remove extended attribute of a file or directory\n<p>This call removes the extended attribute named “xattr” …\n"],["rename","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-rename","(p1, p2)","<p>rename a file on the same filesystem\n<p>Rename a file to a new place on the same filesystem. This is the …\n"],["resize2fs","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-resize2fs","(p1)","<p>resize an ext2, ext3 or ext4 filesystem\n<p>This resizes an ext2, ext3 or ext4 filesystem to match the size …\n"],["resize2fs_M","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-resize2fs_M","(p1)","<p>resize an ext2, ext3 or ext4 filesystem to the minimum size\n<p>This command is the same as “g.resize2fs”, …\n"],["resize2fs_size","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-resize2fs_size","(p1, p2)","<p>resize an ext2, ext3 or ext4 filesystem (with size)\n<p>This command is the same as “g.resize2fs” …\n"],["rm","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-rm","(p1)","<p>remove a file\n<p>Remove the single file “path”.\n<p>(For the C API documentation for this function, …\n"],["rm_f","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-rm_f","(p1)","<p>remove a file ignoring errors\n<p>Remove the file “path”.\n<p>If the file doesn’t exist, that error is …\n"],["rm_rf","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-rm_rf","(p1)","<p>remove a file or directory recursively\n<p>Remove the file or directory “path”, recursively removing …\n"],["rmdir","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-rmdir","(p1)","<p>remove a directory\n<p>Remove the single directory “path”.\n<p>(For the C API documentation for this …\n"],["rmmountpoint","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-rmmountpoint","(p1)","<p>remove a mountpoint\n<p>This calls removes a mountpoint that was previously created with\n“g.mkmountpoint”. …\n"],["rsync","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-rsync","(*args)","<p>synchronize the contents of two directories\n<p>This call may be used to copy or synchronize two directories …\n"],["rsync_in","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-rsync_in","(*args)","<p>synchronize host or remote filesystem with filesystem\n<p>This call may be used to copy or synchronize the …\n"],["rsync_out","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-rsync_out","(*args)","<p>synchronize filesystem with host or remote filesystem\n<p>This call may be used to copy or synchronize the …\n"],["scrub_device","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-scrub_device","(p1)","<p>scrub (securely wipe) a device\n<p>This command writes patterns over “device” to make data retrieval …\n"],["scrub_file","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-scrub_file","(p1)","<p>scrub (securely wipe) a file\n<p>This command writes patterns over a file to make data retrieval more\ndifficult. …\n"],["scrub_freespace","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-scrub_freespace","(p1)","<p>scrub (securely wipe) free space\n<p>This command creates the directory “dir” and then fills it …\n"],["set_append","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_append","(p1)","<p>add options to kernel command line\n<p>This function is used to add additional options to the libguestfs appliance\n…\n"],["set_attach_method","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_attach_method","(p1)","<p>set the backend\n<p>Set the method that libguestfs uses to connect to the backend guestfsd\ndaemon.\n<p>See “BACKEND” …\n"],["set_autosync","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_autosync","(p1)","<p>set autosync mode\n<p>If “autosync” is true, this enables autosync. Libguestfs will make a best …\n"],["set_backend","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_backend","(p1)","<p>set the backend\n<p>Set the method that libguestfs uses to connect to the backend guestfsd\ndaemon.\n<p>This handle …\n"],["set_backend_setting","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_backend_setting","(p1, p2)","<p>set a single per-backend settings string\n<p>Append “name=value” to the backend settings string …\n"],["set_backend_settings","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_backend_settings","(p1)","<p>replace per-backend settings strings\n<p>Set a list of zero or more settings which are passed through to the …\n"],["set_cachedir","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_cachedir","(p1)","<p>set the appliance cache directory\n<p>Set the directory used by the handle to store the appliance cache, when …\n"],["set_direct","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_direct","(p1)","<p>enable or disable direct appliance mode\n<p>If the direct appliance mode flag is enabled, then stdin and stdout …\n"],["set_e2attrs","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_e2attrs","(*args)","<p>set ext2 file attributes of a file\n<p>This sets or clears the file attributes “attrs” associated …\n"],["set_e2generation","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_e2generation","(p1, p2)","<p>set ext2 file generation of a file\n<p>This sets the ext2 file generation of a file.\n<p>See “g.get_e2generation”. …\n"],["set_e2label","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_e2label","(p1, p2)","<p>set the ext2/3/4 filesystem label\n<p>This sets the ext2/3/4 filesystem label of the filesystem on “device” …\n"],["set_e2uuid","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_e2uuid","(p1, p2)","<p>set the ext2/3/4 filesystem UUID\n<p>This sets the ext2/3/4 filesystem UUID of the filesystem on “device” …\n"],["set_event_callback","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_event_callback","(p1, p2)","<p>Call\n<code>guestfs_set_event_callback[http://libguestfs.org/guestfs.3.html#guestfs_set_event_callback]</code>\nto register …\n"],["set_hv","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_hv","(p1)","<p>set the hypervisor binary\n<p>Set the hypervisor binary that we will use. The hypervisor depends on the\nbackend, …\n"],["set_label","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_label","(p1, p2)","<p>set filesystem label\n<p>Set the filesystem label on “mountable” to “label”.\n<p>Only some …\n"],["set_libvirt_requested_credential","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_libvirt_requested_credential","(p1, p2)","<p>pass requested credential back to libvirt\n<p>After requesting the “index”‘th credential from the …\n"],["set_libvirt_supported_credentials","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_libvirt_supported_credentials","(p1)","<p>set libvirt credentials supported by calling program\n<p>Call this function before setting an event handler …\n"],["set_memsize","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_memsize","(p1)","<p>set memory allocated to the hypervisor\n<p>This sets the memory size in megabytes allocated to the hypervisor. …\n"],["set_network","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_network","(p1)","<p>set enable network flag\n<p>If “network” is true, then the network is enabled in the libguestfs …\n"],["set_path","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_path","(p1)","<p>set the search path\n<p>Set the path that libguestfs searches for kernel and initrd.img.\n<p>The default is “$libdir/guestfs” …\n"],["set_pgroup","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_pgroup","(p1)","<p>set process group flag\n<p>If “pgroup” is true, child processes are placed into their own process …\n"],["set_program","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_program","(p1)","<p>set the program name\n<p>Set the program name. This is an informative string which the main program\nmay optionally …\n"],["set_qemu","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_qemu","(p1)","<p>set the hypervisor binary (usually qemu)\n<p>Set the hypervisor binary (usually qemu) that we will use.\n<p>The …\n"],["set_recovery_proc","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_recovery_proc","(p1)","<p>enable or disable the recovery process\n<p>If this is called with the parameter “false” then “g.launch” …\n"],["set_selinux","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_selinux","(p1)","<p>set SELinux enabled or disabled at appliance boot\n<p>This sets the selinux flag that is passed to the appliance …\n"],["set_smp","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_smp","(p1)","<p>set number of virtual CPUs in appliance\n<p>Change the number of virtual CPUs assigned to the appliance.  …\n"],["set_tmpdir","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_tmpdir","(p1)","<p>set the temporary directory\n<p>Set the directory used by the handle to store temporary files.\n<p>The environment …\n"],["set_trace","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_trace","(p1)","<p>enable or disable command traces\n<p>If the command trace flag is set to 1, then libguestfs calls, parameters …\n"],["set_uuid","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_uuid","(p1, p2)","<p>set the filesystem UUID\n<p>Set the filesystem UUID on “device” to “uuid”. If this fails …\n"],["set_uuid_random","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_uuid_random","(p1)","<p>set a random UUID for the filesystem\n<p>Set the filesystem UUID on “device” to a random UUID.  …\n"],["set_verbose","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-set_verbose","(p1)","<p>set verbose mode\n<p>If “verbose” is true, this turns on verbose messages.\n<p>Verbose messages are disabled …\n"],["setcon","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-setcon","(p1)","<p>set SELinux security context\n<p>This sets the SELinux security context of the daemon to the string\n“context”. …\n"],["setxattr","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-setxattr","(p1, p2, p3, p4)","<p>set extended attribute of a file or directory\n<p>This call sets the extended attribute named “xattr” …\n"],["sfdisk","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-sfdisk","(p1, p2, p3, p4, p5)","<p>create partitions on a block device\n<p>This is a direct interface to the sfdisk(8) program for creating partitions\n…\n"],["sfdiskM","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-sfdiskM","(p1, p2)","<p>create partitions on a block device\n<p>This is a simplified interface to the “g.sfdisk” command, …\n"],["sfdisk_N","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-sfdisk_N","(p1, p2, p3, p4, p5, p6)","<p>modify a single partition on a block device\n<p>This runs sfdisk(8) option to modify just the single partition …\n"],["sfdisk_disk_geometry","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-sfdisk_disk_geometry","(p1)","<p>display the disk geometry from the partition table\n<p>This displays the disk geometry of “device” …\n"],["sfdisk_kernel_geometry","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-sfdisk_kernel_geometry","(p1)","<p>display the kernel geometry\n<p>This displays the kernel’s idea of the geometry of “device”.\n<p>The …\n"],["sfdisk_l","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-sfdisk_l","(p1)","<p>display the partition table\n<p>This displays the partition table on “device”, in the human-readable …\n"],["sh","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-sh","(p1)","<p>run a command via the shell\n<p>This call runs a command from the guest filesystem via the guest’s /bin/sh.\n…\n"],["sh_lines","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-sh_lines","(p1)","<p>run a command via the shell returning lines\n<p>This is the same as “g.sh”, but splits the result …\n"],["shutdown","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-shutdown","()","<p>shutdown the hypervisor\n<p>This is the opposite of “g.launch”. It performs an orderly shutdown …\n"],["sleep","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-sleep","(p1)","<p>sleep for some seconds\n<p>Sleep for “secs” seconds.\n<p>(For the C API documentation for this function, …\n"],["stat","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-stat","(p1)","<p>get file information\n<p>Returns file information for the given “path”.\n<p>This is the same as the stat(2) …\n"],["statns","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-statns","(p1)","<p>get file information\n<p>Returns file information for the given “path”.\n<p>This is the same as the stat(2) …\n"],["statvfs","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-statvfs","(p1)","<p>get file system statistics\n<p>Returns file system statistics for any mounted file system. “path” …\n"],["strings","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-strings","(p1)","<p>print the printable strings in a file\n<p>This runs the strings(1) command on a file and returns the list …\n"],["strings_e","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-strings_e","(p1, p2)","<p>print the printable strings in a file\n<p>This is like the “g.strings” command, but allows you to …\n"],["swapoff_device","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-swapoff_device","(p1)","<p>disable swap on device\n<p>This command disables the libguestfs appliance swap device or partition\nnamed “device”. …\n"],["swapoff_file","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-swapoff_file","(p1)","<p>disable swap on file\n<p>This command disables the libguestfs appliance swap on file.\n<p>(For the C API documentation …\n"],["swapoff_label","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-swapoff_label","(p1)","<p>disable swap on labeled swap partition\n<p>This command disables the libguestfs appliance swap on labeled …\n"],["swapoff_uuid","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-swapoff_uuid","(p1)","<p>disable swap on swap partition by UUID\n<p>This command disables the libguestfs appliance swap partition with …\n"],["swapon_device","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-swapon_device","(p1)","<p>enable swap on device\n<p>This command enables the libguestfs appliance to use the swap device or\npartition …\n"],["swapon_file","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-swapon_file","(p1)","<p>enable swap on file\n<p>This command enables swap to a file. See “g.swapon_device” for other notes.\n…\n"],["swapon_label","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-swapon_label","(p1)","<p>enable swap on labeled swap partition\n<p>This command enables swap to a labeled swap partition. See\n“g.swapon_device” …\n"],["swapon_uuid","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-swapon_uuid","(p1)","<p>enable swap on swap partition by UUID\n<p>This command enables swap to a swap partition with the given UUID …\n"],["sync","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-sync","()","<p>sync disks, writes are flushed through to the disk image\n<p>This syncs the disk, so that any writes are flushed …\n"],["syslinux","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-syslinux","(*args)","<p>install the SYSLINUX bootloader\n<p>Install the SYSLINUX bootloader on “device”.\n<p>The device parameter …\n"],["tail","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-tail","(p1)","<p>return last 10 lines of a file\n<p>This command returns up to the last 10 lines of a file as a list of\nstrings. …\n"],["tail_n","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-tail_n","(p1, p2)","<p>return last N lines of a file\n<p>If the parameter “nrlines” is a positive number, this returns …\n"],["tar_in","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-tar_in","(*args)","<p>unpack tarfile to directory\n<p>This command uploads and unpacks local file “tarfile” into directory. …\n"],["tar_in_opts","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-tar_in_opts","(*args)","<p>unpack tarfile to directory\n<p>This command uploads and unpacks local file “tarfile” into directory. …\n"],["tar_out","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-tar_out","(*args)","<p>pack directory into tarfile\n<p>This command packs the contents of directory and downloads it to local file\n…\n"],["tar_out_opts","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-tar_out_opts","(*args)","<p>pack directory into tarfile\n<p>This command packs the contents of directory and downloads it to local file\n…\n"],["tgz_in","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-tgz_in","(p1, p2)","<p>unpack compressed tarball to directory\n<p>This command uploads and unpacks local file “tarball” …\n"],["tgz_out","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-tgz_out","(p1, p2)","<p>pack directory into compressed tarball\n<p>This command packs the contents of directory and downloads it to …\n"],["touch","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-touch","(p1)","<p>update file timestamps or create a new file\n<p>Touch acts like the touch(1) command. It can be used to update …\n"],["truncate","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-truncate","(p1)","<p>truncate a file to zero size\n<p>This command truncates “path” to a zero-length file. The file must …\n"],["truncate_size","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-truncate_size","(p1, p2)","<p>truncate a file to a particular size\n<p>This command truncates “path” to size “size” …\n"],["tune2fs","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-tune2fs","(*args)","<p>adjust ext2/ext3/ext4 filesystem parameters\n<p>This call allows you to adjust various filesystem parameters …\n"],["tune2fs_l","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-tune2fs_l","(p1)","<p>get ext2/ext3/ext4 superblock details\n<p>This returns the contents of the ext2, ext3 or ext4 filesystem superblock …\n"],["txz_in","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-txz_in","(p1, p2)","<p>unpack compressed tarball to directory\n<p>This command uploads and unpacks local file “tarball” …\n"],["txz_out","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-txz_out","(p1, p2)","<p>pack directory into compressed tarball\n<p>This command packs the contents of directory and downloads it to …\n"],["umask","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-umask","(p1)","<p>set file mode creation mask (umask)\n<p>This function sets the mask used for creating new files and device …\n"],["umount","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-umount","(*args)","<p>unmount a filesystem\n<p>This unmounts the given filesystem. The filesystem may be specified either\nby its …\n"],["umount_all","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-umount_all","()","<p>unmount all filesystems\n<p>This unmounts all mounted filesystems.\n<p>Some internal mounts are not unmounted by …\n"],["umount_local","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-umount_local","(*args)","<p>unmount a locally mounted filesystem\n<p>If libguestfs is exporting the filesystem on a local mountpoint, …\n"],["umount_opts","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-umount_opts","(*args)","<p>unmount a filesystem\n<p>This unmounts the given filesystem. The filesystem may be specified either\nby its …\n"],["upload","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-upload","(p1, p2)","<p>upload a file from the local machine\n<p>Upload local file filename to remotefilename on the filesystem.\n<p>filename …\n"],["upload_offset","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-upload_offset","(p1, p2, p3)","<p>upload a file from the local machine with offset\n<p>Upload local file filename to remotefilename on the filesystem. …\n"],["user_cancel","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-user_cancel","()","<p>cancel the current upload or download operation\n<p>This function cancels the current upload or download operation. …\n"],["utimens","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-utimens","(p1, p2, p3, p4, p5)","<p>set timestamp of a file with nanosecond precision\n<p>This command sets the timestamps of a file with nanosecond …\n"],["utsname","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-utsname","()","<p>appliance kernel version\n<p>This returns the kernel version of the appliance, where this is available.\nThis …\n"],["version","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-version","()","<p>get the library version number\n<p>Return the libguestfs version number that the program is linked against. …\n"],["vfs_label","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-vfs_label","(p1)","<p>get the filesystem label\n<p>This returns the label of the filesystem on “mountable”.\n<p>If the filesystem …\n"],["vfs_type","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-vfs_type","(p1)","<p>get the Linux VFS type corresponding to a mounted device\n<p>This command gets the filesystem type corresponding …\n"],["vfs_uuid","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-vfs_uuid","(p1)","<p>get the filesystem UUID\n<p>This returns the filesystem UUID of the filesystem on “mountable”.\n<p>If …\n"],["vg_activate","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-vg_activate","(p1, p2)","<p>activate or deactivate some volume groups\n<p>This command activates or (if “activate” is false) …\n"],["vg_activate_all","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-vg_activate_all","(p1)","<p>activate or deactivate all volume groups\n<p>This command activates or (if “activate” is false) …\n"],["vgchange_uuid","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-vgchange_uuid","(p1)","<p>generate a new random UUID for a volume group\n<p>Generate a new random UUID for the volume group “vg”. …\n"],["vgchange_uuid_all","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-vgchange_uuid_all","()","<p>generate new random UUIDs for all volume groups\n<p>Generate new random UUIDs for all volume groups.\n<p>(For the …\n"],["vgcreate","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-vgcreate","(p1, p2)","<p>create an LVM volume group\n<p>This creates an LVM volume group called “volgroup” from the non-empty …\n"],["vglvuuids","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-vglvuuids","(p1)","<p>get the LV UUIDs of all LVs in the volume group\n<p>Given a VG called “vgname”, this returns the …\n"],["vgmeta","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-vgmeta","(p1)","<p>get volume group metadata\n<p>“vgname” is an LVM volume group. This command examines the volume …\n"],["vgpvuuids","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-vgpvuuids","(p1)","<p>get the PV UUIDs containing the volume group\n<p>Given a VG called “vgname”, this returns the UUIDs …\n"],["vgremove","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-vgremove","(p1)","<p>remove an LVM volume group\n<p>Remove an LVM volume group “vgname”, (for example “VG”). …\n"],["vgrename","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-vgrename","(p1, p2)","<p>rename an LVM volume group\n<p>Rename a volume group “volgroup” with the new name “newvolgroup”. …\n"],["vgs","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-vgs","()","<p>list the LVM volume groups (VGs)\n<p>List all the volumes groups detected. This is the equivalent of the vgs(8)\n…\n"],["vgs_full","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-vgs_full","()","<p>list the LVM volume groups (VGs)\n<p>List all the volumes groups detected. This is the equivalent of the vgs(8)\n…\n"],["vgscan","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-vgscan","()","<p>rescan for LVM physical volumes, volume groups and logical volumes\n<p>This rescans all block devices and …\n"],["vguuid","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-vguuid","(p1)","<p>get the UUID of a volume group\n<p>This command returns the UUID of the LVM VG named “vgname”.\n<p>(For …\n"],["wait_ready","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-wait_ready","()","<p>wait until the hypervisor launches (no op)\n<p>This function is a no op.\n<p>In versions of the API &lt; 1.0.71 …\n"],["wc_c","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-wc_c","(p1)","<p>count characters in a file\n<p>This command counts the characters in a file, using the “wc -c” external …\n"],["wc_l","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-wc_l","(p1)","<p>count lines in a file\n<p>This command counts the lines in a file, using the “wc -l” external\ncommand. …\n"],["wc_w","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-wc_w","(p1)","<p>count words in a file\n<p>This command counts the words in a file, using the “wc -w” external\ncommand. …\n"],["wipefs","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-wipefs","(p1)","<p>wipe a filesystem signature from a device\n<p>This command erases filesystem or RAID signatures from the specified …\n"],["write","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-write","(p1, p2)","<p>create a new file\n<p>This call creates a file called “path”. The content of the file is the\nstring …\n"],["write_append","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-write_append","(p1, p2)","<p>append content to end of file\n<p>This call appends “content” to the end of file “path”. …\n"],["write_file","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-write_file","(p1, p2, p3)","<p>create a file\n<p>This call creates a file called “path”. The contents of the file is the\nstring …\n"],["xfs_admin","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-xfs_admin","(*args)","<p>change parameters of an XFS filesystem\n<p>Change the parameters of the XFS filesystem on “device”. …\n"],["xfs_growfs","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-xfs_growfs","(*args)","<p>expand an existing XFS filesystem\n<p>Grow the XFS filesystem mounted at “path”.\n<p>The returned struct …\n"],["xfs_info","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-xfs_info","(p1)","<p>get geometry of XFS filesystem\n<p>“pathordevice” is a mounted XFS filesystem or a device containing …\n"],["xfs_repair","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-xfs_repair","(*args)","<p>repair an XFS filesystem\n<p>Repair corrupt or damaged XFS filesystem on “device”.\n<p>The filesystem …\n"],["zegrep","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-zegrep","(p1, p2)","<p>return lines matching a pattern\n<p>This calls the external “zegrep” program and returns the matching …\n"],["zegrepi","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-zegrepi","(p1, p2)","<p>return lines matching a pattern\n<p>This calls the external “zegrep -i” program and returns the …\n"],["zero","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-zero","(p1)","<p>write zeroes to the device\n<p>This command writes zeroes over the first few blocks of “device”. …\n"],["zero_device","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-zero_device","(p1)","<p>write zeroes to an entire device\n<p>This command writes zeroes over the entire “device”. Compare …\n"],["zero_free_space","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-zero_free_space","(p1)","<p>zero free space in a filesystem\n<p>Zero the free space in the filesystem mounted on directory. The filesystem\n…\n"],["zerofree","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-zerofree","(p1)","<p>zero unused inodes and disk blocks on ext2/3 filesystem\n<p>This runs the <strong>zerofree</strong> program on “device”. …\n"],["zfgrep","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-zfgrep","(p1, p2)","<p>return lines matching a pattern\n<p>This calls the external “zfgrep” program and returns the matching …\n"],["zfgrepi","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-zfgrepi","(p1, p2)","<p>return lines matching a pattern\n<p>This calls the external “zfgrep -i” program and returns the …\n"],["zfile","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-zfile","(p1, p2)","<p>determine file type inside a compressed file\n<p>This command runs file after first decompressing “path” …\n"],["zgrep","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-zgrep","(p1, p2)","<p>return lines matching a pattern\n<p>This calls the external “zgrep” program and returns the matching …\n"],["zgrepi","Guestfs::Guestfs","Guestfs/Guestfs.html#method-i-zgrepi","(p1, p2)","<p>return lines matching a pattern\n<p>This calls the external “zgrep -i” program and returns the matching …\n"],["README","","README_rdoc.html","","<p>Ruby bindings for libguestfs\n<p>The module Guestfs provides Ruby bindings for the libguestfs API.\n"]]}}