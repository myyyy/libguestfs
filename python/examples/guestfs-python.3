.\" Automatically generated by Podwrapper::Man 1.30.3 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "guestfs-python 3"
.TH guestfs-python 3 "2015-10-26" "libguestfs-1.30.3" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
guestfs\-python \- How to use libguestfs from Python
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& import guestfs
\& g = guestfs.GuestFS (python_return_dict=True)
\& g.add_drive_opts ("disk.img", format="raw", readonly=1)
\& g.launch ()
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This manual page documents how to call libguestfs from the Python
programming language.  This page just documents the differences from
the C \s-1API\s0 and gives some examples.  If you are not familiar with using
libguestfs, you also need to read \fIguestfs\fR\|(3).
.SS "python_return_dict=True"
.IX Subsection "python_return_dict=True"
All new code should construct the handle using:
.PP
.Vb 1
\& g = guestfs.GuestFS (python_return_dict=True)
.Ve
.PP
This indicates that your program wants to receive Python dicts for
methods in the \s-1API\s0 that return hashtables.
.PP
In a future version of libguestfs, this will become the default.
.SS "\s-1EXCEPTIONS\s0"
.IX Subsection "EXCEPTIONS"
Errors from libguestfs functions are mapped into \f(CW\*(C`RuntimeException\*(C'\fR
with a single string argument which is the error message.
.SS "\s-1MORE\s0 \s-1DOCUMENTATION\s0"
.IX Subsection "MORE DOCUMENTATION"
Type:
.PP
.Vb 3
\& $ python
\& >>> import guestfs
\& >>> help (guestfs)
.Ve
.SH "EXAMPLE 1: CREATE A DISK IMAGE"
.IX Header "EXAMPLE 1: CREATE A DISK IMAGE"
.Vb 1
\& # Example showing how to create a disk image.
\& 
\& import guestfs
\& 
\& output = "disk.img"
\& 
\& # All new Python code should pass python_return_dict=True
\& # to the constructor.  It indicates that your program wants
\& # to receive Python dicts for methods in the API that return
\& # hashtables.
\& g = guestfs.GuestFS (python_return_dict=True)
\& 
\& # Create a raw\-format sparse disk image, 512 MB in size.
\& g.disk_create (output, "raw", 512 * 1024 * 1024);
\& 
\& # Set the trace flag so that we can see each libguestfs call.
\& g.set_trace (1)
\& 
\& # Attach the disk image to libguestfs.
\& g.add_drive_opts (output, format = "raw", readonly = 0)
\& 
\& # Run the libguestfs back\-end.
\& g.launch ()
\& 
\& # Get the list of devices.  Because we only added one drive
\& # above, we expect that this list should contain a single
\& # element.
\& devices = g.list_devices ()
\& assert (len (devices) == 1)
\& 
\& # Partition the disk as one single MBR partition.
\& g.part_disk (devices[0], "mbr")
\& 
\& # Get the list of partitions.  We expect a single element, which
\& # is the partition we have just created.
\& partitions = g.list_partitions ()
\& assert (len (partitions) == 1)
\& 
\& # Create a filesystem on the partition.
\& g.mkfs ("ext4", partitions[0])
\& 
\& # Now mount the filesystem so that we can add files.
\& g.mount (partitions[0], "/")
\& 
\& # Create some files and directories.
\& g.touch ("/empty")
\& message = "Hello, world\en"
\& g.write ("/hello", message)
\& g.mkdir ("/foo")
\& 
\& # This one uploads the local file /etc/resolv.conf into
\& # the disk image.
\& g.upload ("/etc/resolv.conf", "/foo/resolv.conf")
\& 
\& # Because we wrote to the disk and we want to detect write
\& # errors, call g.shutdown.  You don\*(Aqt need to do this:
\& # g.close will do it implicitly.
\& g.shutdown ()
\& 
\& # Note also that handles are automatically closed if they are
\& # reaped by reference counting.  You only need to call close
\& # if you want to close the handle right away.
\& g.close ()
.Ve
.SH "EXAMPLE 2: INSPECT A VIRTUAL MACHINE DISK IMAGE"
.IX Header "EXAMPLE 2: INSPECT A VIRTUAL MACHINE DISK IMAGE"
.Vb 1
\& # Example showing how to inspect a virtual machine disk.
\& 
\& import sys
\& import guestfs
\& 
\& assert (len (sys.argv) == 2)
\& disk = sys.argv[1]
\& 
\& # All new Python code should pass python_return_dict=True
\& # to the constructor.  It indicates that your program wants
\& # to receive Python dicts for methods in the API that return
\& # hashtables.
\& g = guestfs.GuestFS (python_return_dict=True)
\& 
\& # Attach the disk image read\-only to libguestfs.
\& g.add_drive_opts (disk, readonly=1)
\& 
\& # Run the libguestfs back\-end.
\& g.launch ()
\& 
\& # Ask libguestfs to inspect for operating systems.
\& roots = g.inspect_os ()
\& if len (roots) == 0:
\&     raise (Error ("inspect_vm: no operating systems found"))
\& 
\& for root in roots:
\&     print "Root device: %s" % root
\& 
\&     # Print basic information about the operating system.
\&     print "  Product name: %s" % (g.inspect_get_product_name (root))
\&     print "  Version:      %d.%d" % \e
\&         (g.inspect_get_major_version (root),
\&          g.inspect_get_minor_version (root))
\&     print "  Type:         %s" % (g.inspect_get_type (root))
\&     print "  Distro:       %s" % (g.inspect_get_distro (root))
\& 
\&     # Mount up the disks, like guestfish \-i.
\&     #
\&     # Sort keys by length, shortest first, so that we end up
\&     # mounting the filesystems in the correct order.
\&     mps = g.inspect_get_mountpoints (root)
\&     def compare (a, b): return len(a) \- len(b)
\&     for device in sorted (mps.keys(), compare):
\&         try:
\&             g.mount_ro (mps[device], device)
\&         except RuntimeError as msg:
\&             print "%s (ignored)" % msg
\& 
\&     # If /etc/issue.net file exists, print up to 3 lines.
\&     filename = "/etc/issue.net"
\&     if g.is_file (filename):
\&         print "\-\-\- %s \-\-\-" % filename
\&         lines = g.head_n (3, filename)
\&         for line in lines: print line
\& 
\&     # Unmount everything.
\&     g.umount_all ()
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIguestfs\fR\|(3),
\&\fIguestfs\-examples\fR\|(3),
\&\fIguestfs\-erlang\fR\|(3),
\&\fIguestfs\-golang\fR\|(3),
\&\fIguestfs\-java\fR\|(3),
\&\fIguestfs\-lua\fR\|(3),
\&\fIguestfs\-ocaml\fR\|(3),
\&\fIguestfs\-perl\fR\|(3),
\&\fIguestfs\-recipes\fR\|(1),
\&\fIguestfs\-ruby\fR\|(3),
http://libguestfs.org/.
.SH "AUTHORS"
.IX Header "AUTHORS"
Richard W.M. Jones (\f(CW\*(C`rjones at redhat dot com\*(C'\fR)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2010\-2012 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
This manual page contains examples which we hope you will use in
your programs.  The examples may be freely copied, modified and
distributed for any purpose without any restrictions.
.SH "BUGS"
.IX Header "BUGS"
To get a list of bugs against libguestfs, use this link:
https://bugzilla.redhat.com/buglist.cgi?component=libguestfs&product=Virtualization+Tools
.PP
To report a new bug against libguestfs, use this link:
https://bugzilla.redhat.com/enter_bug.cgi?component=libguestfs&product=Virtualization+Tools
.PP
When reporting a bug, please supply:
.IP "\(bu" 4
The version of libguestfs.
.IP "\(bu" 4
Where you got libguestfs (eg. which Linux distro, compiled from source, etc)
.IP "\(bu" 4
Describe the bug accurately and give a way to reproduce it.
.IP "\(bu" 4
Run \fIlibguestfs\-test\-tool\fR\|(1) and paste the \fBcomplete, unedited\fR
output into the bug report.
